<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: chef | /* steve jansen */]]></title>
  <link href="http://steve-jansen.github.io/blog/categories/chef/atom.xml" rel="self"/>
  <link href="http://steve-jansen.github.io/"/>
  <updated>2014-10-03T18:34:47-04:00</updated>
  <id>http://steve-jansen.github.io/</id>
  <author>
    <name><![CDATA[Steve Jansen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[regexes for the serverspec 2 update]]></title>
    <link href="http://steve-jansen.github.io/blog/2014/10/03/regexes-for-the-serverspec-2-update/"/>
    <updated>2014-10-03T18:24:25-04:00</updated>
    <id>http://steve-jansen.github.io/blog/2014/10/03/regexes-for-the-serverspec-2-update</id>
    <content type="html"><![CDATA[<p>The Serverspec team just released v2 of their outstanding testing library
today, after a very long beta period.  The v2 release had a
<a href="http://serverspec.org/changes-of-v2.html">few breaking breaking changes</a>
due to dropped rspec matchers that had been deprecated.</p>

<p>If your <a href="http://kitchen.ci/">test-kitchen</a> tests recently broke today,
here&rsquo;s a few regexes I used with Sublime Text&rsquo;s regex find/replace
to rewrite the dropped matchers for the new matchers.</p>

<p>```
it\s<em>{\s</em>(should|should_not)\s<em>return_(stdout|stderr)\s</em>(?(\/.<em>\/))?\s</em>}
its(:\2) { \1 match \3 }</p>

<p>it\s<em>{\s</em>(should|should_not)\s<em>return_(stdout|stderr)\s</em>(?(\&ldquo;.<em>\&rdquo;))?\s</em>}
its(:\2) { \1 contain \3 }</p>

<p>it\s<em>{\s</em>(should|should_not)\s<em>return_(stdout|stderr)\s</em>(?(&lsquo;.<em>&rsquo;))?\s</em>}
its(:\2) { \1 contain \3 }</p>

<p>it\s<em>{\s</em>(should|should_not)\s<em>return_exit_status\s</em>(\d+)\s*}
its(:exit_status) { \1 eq \2 }
```</p>

<p>Hopefully the kitchen busser project will one day add support for
Gemfile-style constraints on the test node, since busser always
<a href="https://github.com/test-kitchen/test-kitchen/issues/242#issuecomment-28991870">installs the latest version of a busser plugin gem today.</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chef'ing custom nginx configs with the nginx cookbook]]></title>
    <link href="http://steve-jansen.github.io/blog/2014/08/27/chefing-custom-nginx-configs-with-the-nginx-cookbook/"/>
    <updated>2014-08-27T19:41:10-04:00</updated>
    <id>http://steve-jansen.github.io/blog/2014/08/27/chefing-custom-nginx-configs-with-the-nginx-cookbook</id>
    <content type="html"><![CDATA[<p>The <a href="http://supermarket.getchef.com/cookbooks/nginx">nginx</a> cookbook has been
super helpful Chef'ing some web apps recently.  One thing I struggled to
understand was how to use my own custom conf, like <code>/etc/nginx/nginx.conf</code>, that
is optimized for how I use nginx.</p>

<p>One solution I tried, which is probably a Chef anti-pattern, is to only include
the nginx cookbook on the initial converge:</p>

<h2>The Wrong Way</h2>

<p>``` ruby</p>

<h1>the nginx community cookbook will relentlessly revert conf files,</h1>

<h1>so avoid running it unless nginx isn&rsquo;t installed,</h1>

<h1>or we explicitly reset/delete the node attribute</h1>

<p>include_recipe &lsquo;nginx&rsquo; unless node[&lsquo;nginx&rsquo;][&lsquo;installed&rsquo;]
node.set[&lsquo;nginx&rsquo;][&lsquo;installed&rsquo;] = true</p>

<h1>our custom nginx.conf</h1>

<p>template &lsquo;/etc/nginx/nginx.conf&rsquo; do
   source &lsquo;nginx.conf.erb&rsquo;
   owner &lsquo;root&rsquo;
   group &lsquo;root&rsquo;
   mode  &lsquo;0644&rsquo;
   notifies :reload, &ldquo;service[nginx]&rdquo;, :delayed
end
```</p>

<p>I knew this was wrong when I wrote it.   Chef is all about idempotency.
But, I couldn&rsquo;t figure out a way to keep the nginx cookbook from reverting my
custom conf during subsequent converges, only to have my <code>template</code> restore my
custom conf a few seconds later.</p>

<h2>The Better Way</h2>

<p>The OpsCode blog <a href="http://www.getchef.com/blog/2013/12/03/doing-wrapper-cookbooks-right/">Doing Wrapper Cookbooks Right</a> shows the right way, and really opened my eyes on the power of
Chef&rsquo;s two phase model (compile, then converge).</p>

<p>``` ruby
include_recipe &lsquo;nginx&rsquo;</p>

<h1>use our custom nginx.conf, rather than the one that ships in the nginx cookbook</h1>

<h1>this avoids the nginx and my-app cookbooks from fighting for control of</h1>

<h1>the same target file</h1>

<p>resources(&lsquo;template[nginx.conf]&rsquo;).cookbook &lsquo;my-app&rsquo;
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Including another berksfile in your berksfile]]></title>
    <link href="http://steve-jansen.github.io/blog/2014/05/06/including-another-berksfile-in-your-berksfile/"/>
    <updated>2014-05-06T13:11:57-04:00</updated>
    <id>http://steve-jansen.github.io/blog/2014/05/06/including-another-berksfile-in-your-berksfile</id>
    <content type="html"><![CDATA[<p>As part of my cooking with <a href="http://www.getchef.com/downloads/chef-dk/">Chef&rsquo;s new workflow</a>,
I wanted Berkshelf to dynamically import the secondary dependencies of my site-cookbook&rsquo;s dependencies.</p>

<p>Thanks <a href="https://coderwall.com/p/j72egw">Vasily Mikhayliche&rsquo;s Coderwall post</a> and <a href="https://sethvargo.com/berksfile-magic/">Seth Vargo&rsquo;s post on Berks magic</a>, I was able to hack something
that worked for me with <a href="http://berkshelf.com/v2.0/">Berkshelf v2.0</a>. (We don&rsquo;t have time to migrate to Berks 3.0 for another couple of weeks, and this feature doesn&rsquo;t seem to be part of Berks 3.0).</p>

<p>``` ruby</p>

<h1>vi:ft=ruby:</h1>

<p>site :opscode</p>

<h1>Extension method to import secondary dependencies in a referenced site-cookbook</h1>

<h1>using the constraints in the site-cookbook&rsquo;s Berkshelf file, rather than just</h1>

<h1>the name of the dependencies in the site-cookbook&rsquo;s metadata.rb file</h1>

<p>#</p>

<h1>credit: <a href="https://sethvargo.com/berksfile-magic/">https://sethvargo.com/berksfile-magic/</a></h1>

<h1><a href="https://coderwall.com/p/j72egw">https://coderwall.com/p/j72egw</a></h1>

<p>def site_cookbook(path)
  berksfile = &ldquo;../#{path}/Berksfile&rdquo;</p>

<p>  if File.exists?(berksfile)</p>

<pre><code>contents = File.read(berksfile)

# comment out lines like `site :opscode`, which cannot be imported multiple times
contents = contents.gsub(/(^\s*site\s)/, '#\1')

# comment out lines like `metadata`, which cannot be imported multiple times
contents = contents.gsub(/(^\s*metadata\s)/, '#\1')

instance_eval(contents) 
</code></pre>

<p>  end
end</p>

<p>cookbook &lsquo;nginx&rsquo;, &lsquo;~> 2.4.4&rsquo;
site_cookbook &lsquo;my-site-cookbook&rsquo;</p>

<p>```</p>

<p>Happy cooking!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adding Chef encrypted data bags to source control]]></title>
    <link href="http://steve-jansen.github.io/blog/2014/05/05/adding-chef-encrypted-data-bags-to-source-control/"/>
    <updated>2014-05-05T15:54:25-04:00</updated>
    <id>http://steve-jansen.github.io/blog/2014/05/05/adding-chef-encrypted-data-bags-to-source-control</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been using Chef for a bit now and generally a huge fan of the new
<a href="http://www.getchef.com/downloads/chef-dk/">Chef workflow</a>.</p>

<p>We are working hard to attain true continuous delivery and test driven development with Chef.
The devil is in the details now.</p>

<p>One small wrinkle in our effort has been marrying <a href="http://docs.opscode.com/chef/essentials_data_bags.html#encrypt-a-data-bag-item">encrypted data_bags</a> with our chef-repo in GitHub.</p>

<p>I don&rsquo;t want to type the optional argument <code>--secret-file ~/.chef/encrypted_data_bag_secret</code> everytime I interact with a data bag. So, I added this option to my <code>~/.chef/knife.rb</code> file.</p>

<p><code>ruby
knife[:secret_file]  = "#{current_dir}/encrypted_data_bag_secret"
</code></p>

<p>However, this precludes me from easily exporting the edited file to disk.  The export will always be my secret plaintext,
not the encrypted ciphertext.   Not exactly what you want to commit to GitHub.</p>

<p>``` ruby
knife data_bag create users jenkins</p>

<h1>DON&rsquo;T COMMIT THIS&hellip; the exported file will be unencrypted</h1>

<p>knife data_bag users jenkins &mdash;format=json > data_bags/users/jenkins.json
```</p>

<p>So, I decided to create a bash alias to temporarily disable the knife.rb setting and export the data bag to a file:</p>

<p>My <code>~/.bash_profile</code> file contains this alias:</p>

<p><code>
function knife-ciphertext () {
   sed -e "s/knife\[\:secret_file\]/\#knife\[\:secret_file\]/"  -i .bak  ~/.chef/knife.rb
   knife $@ --format=json
   mv  ~/.chef/knife.rb.bak  ~/.chef/knife.rb
}
alias knife-ciphertext=knife-ciphertext
</code></p>

<p>This bash function comments out the secret file option in knife.rb using sed&rsquo;s in-place editing.</p>

<p>Now I can commit the data bag in its encrypted format:</p>

<p><code>
knife-ciphertext data_bag show users jenkins &gt; data_bags/users/jenkins.json
git add data_bags/users/jenkins.json
git commit -m 'adding the latest jenkins data bag'
</code></p>

<p>Happing cooking!</p>
]]></content>
  </entry>
  
</feed>
