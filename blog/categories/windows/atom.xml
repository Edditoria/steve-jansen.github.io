<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: windows | /* steve jansen */]]></title>
  <link href="http://steve-jansen.github.io/blog/categories/windows/atom.xml" rel="self"/>
  <link href="http://steve-jansen.github.io/"/>
  <updated>2014-03-05T21:08:14-05:00</updated>
  <id>http://steve-jansen.github.io/</id>
  <author>
    <name><![CDATA[Steve Jansen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A better FTP client for Windows you already have: Git bash's curl command]]></title>
    <link href="http://steve-jansen.github.io/blog/2014/02/15/a-better-ftp-client-for-windows-you-already-have-gits-curl-command/"/>
    <updated>2014-02-15T17:24:00-05:00</updated>
    <id>http://steve-jansen.github.io/blog/2014/02/15/a-better-ftp-client-for-windows-you-already-have-gits-curl-command</id>
    <content type="html"><![CDATA[<p>My shop has a couple of internal FTP servers to mirror commonly used installers for .Net devs.
Installers for apps like Visual Studio can be huge, so GitHub isn&rsquo;t the best place for this, and
it would also smoke most of our Dropbox quotas.  So an FTP server seems like the 3rd best option.</p>

<p>We are a geographically distributed team, with a VPN to access internal servers.  Even with a reliable
VPN session over ISP fiber connection, I&rsquo;ve experience lots of realiability problems downloading large files
with the native Windows Explorer / Internet Explorer FTP.</p>

<p>The Windows ftp command line client can be a pain to work with.  Fortunately, the Git bash emulator for Windows
(msysgit) includes a MinGW port of the awesome <code>curl</code> utility.  The <code>curl</code> utility has all kinds of awesome features
for downloading large files.</p>

<p>Here&rsquo;s a few options I found really useful:</p>

<p><code>bash
curl -C - -v -O "ftp://ftp.example.com/path/to/file.zip"
</code></p>

<ul>
<li><code>-C -</code> option tells bash to automatically continue an interrupted download, if the server supports this feature.</li>
<li><code>-v</code> prints verbose stats, including an dynamic progress info</li>
<li><code>-O</code> automatically saves the file using the remote file name to the current working directory</li>
</ul>


<p>I crafted this gist to enable downloading a large number of binaries related to .Net development from our FTP server.</p>

<p><div><script src='https://gist.github.com/9378219.js'></script>
<noscript><pre><code>&lt;html&gt;&lt;body&gt;You are being &lt;a href=&quot;https://github.com/gist/9378219&quot;&gt;redirected&lt;/a&gt;.&lt;/body&gt;&lt;/html&gt;</code></pre></noscript></div>
</p>

<p>Be warned, this hack spawns a new command prompt window for each download, so it can get a bit crazy.  This seemed like
the best worst way to download in parallel while also making sense of each download&rsquo;s status.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tailoring the Windows Command Prompt Shell]]></title>
    <link href="http://steve-jansen.github.io/blog/2013/02/27/tailoring-the-windows-command-prompt-shell/"/>
    <updated>2013-02-27T14:18:00-05:00</updated>
    <id>http://steve-jansen.github.io/blog/2013/02/27/tailoring-the-windows-command-prompt-shell</id>
    <content type="html"><![CDATA[<p>I spend a lot of time in the Windows Command Prompt.  Most developers I work with don&rsquo;t know some of the tricks up the Command Prompt&rsquo;s sleeve.  So allow me to share some of my favorite settings.</p>

<!-- more -->


<h2>Launching the Command Prompt</h2>

<p>Windows gurus launch the command prompt using the keyboard shortcut <code>Windows Logo Key</code>+<code>R</code> (i.e., &ldquo;Run&rdquo;) > Type <code>cmd.exe</code> then <code>Enter</code>.  This is way faster than navigating the Windows Start Menu to find the Command Prompt.</p>

<h2>Preferences</h2>

<p>Right click the Command Prompt title bar and select &ldquo;Properties&rdquo; from the context menu.  I modify the preferences highlighted in below screenshots to accomplish a few things:</p>

<ul>
<li>make the shell easier on our overtaxed eyes ;)</li>
<li>quicker navigation of the command history (up/down arrows) by removing the noise of duplicate entries</li>
<li>simplify copying text to copy any selected text (by the mouse) when you press enter</li>
<li>simplify pasting text to paste on right click</li>
</ul>


<p><img src="/images/2013-02-27-A.png" alt="Screenshot of the Command Prompt Options tab" /></p>

<p><img src="/images/2013-02-27-B.png" alt="Screenshot of the Command Prompt Options tab" /></p>

<p><img src="/images/2013-02-27-C.png" alt="Screenshot of the Command Prompt Options tab" /></p>

<p><img src="/images/2013-02-27-D.png" alt="Screenshot of the Command Prompt Options tab" /></p>

<h2>Tab and Filename Autocompletion</h2>

<p>The <code>Tab</code> key should auto complete the names of files and folders in the current working directory.  Each press of <code>Tab</code> should cycle to the next name.  The autocompletion is pretty smart &ndash; it will filter the choices based on what you have already typed.   For example, typing <code>D</code> then <code>Tab</code> will autocomplete the first file or folder that starts with the letter &ldquo;D&rdquo;.  Tabbing again will display the next file or folder that start with D.  Tabbing will cycle through a ring of possible matches.</p>

<p>For example, tabbing through the letter &ldquo;D&rdquo; in your user profile directory on Windows 7 might autocomplete &ldquo;Desktop&rdquo;, &ldquo;Documents&rdquo;, &ldquo;Downloads&rdquo;, and then back to &ldquo;Desktop&rdquo;.  Autocomplete will even quote paths with spaces, which is a nice trick.  I often see experienced developers stuggle to find a filepath, repeatedly doing <code>DIR</code> and <code>CD</code> commands to just run a single batch script.</p>

<p>One small shortcoming is autocomlete cannot expand environmental variables like <code>%ProgramFiles%</code> or <code>%UserProfile%</code>.  Although you can use <code>Windows logo key</code> + <code>R</code> Run dialog to autocomplete environmental variables.</p>

<p>Autocompletion saves you a bunch of typing with just a key or two to filter your choices, tabbing until you find the folder you want,  pressing <code>\</code> to start tabbing through the subfolder, and repeat.  And it makes you look more competent when pair programming.</p>

<h2>Command History</h2>

<p>The <code>DOSKEY</code> utility is similar to the <code>history</code> utility on Unix/Linux shells.  Most developers know you can press the up arrow or down arrow to cycle through the history of issued commands.</p>

<p>Most developers (and even sysadmins) aren&rsquo;t aware of the advanced keyboard shortcuts wired to <code>DOSKEY</code>:</p>

<ul>
<li>UP and DOWN ARROWS recall commands</li>
<li><code>ESC</code> clears command line</li>
<li><code>F7</code> displays command history</li>
<li><code>ALT</code>+<code>F7</code> clears command history</li>
<li><code>F8</code> searches command history</li>
<li><code>F9</code> selects a command by number</li>
</ul>


<p>Example of pressing <code>ALT</code>+<code>F7</code> to view the command history:
<img src="/images/2013-02-27-E.png" alt="Screenshot of the visual command history" /></p>

<p>Example of pressing <code>F9</code> to recall a command by history number:
<img src="/images/2013-02-27-F.png" alt="Screenshot of the visual command history" /></p>

<p>Example of pressing <code>F8</code> to cycle through history entries matching the text &ldquo;D&rdquo; already typed into the comamnd line buffer:
<img src="/images/2013-02-27-G.png" alt="Screenshot of the visual command history" /></p>
]]></content>
  </entry>
  
</feed>
