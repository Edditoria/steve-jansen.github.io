<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: windows | /* steve jansen */]]></title>
  <link href="http://steve-jansen.github.io/blog/categories/windows/atom.xml" rel="self"/>
  <link href="http://steve-jansen.github.io/"/>
  <updated>2014-03-10T20:24:41-04:00</updated>
  <id>http://steve-jansen.github.io/</id>
  <author>
    <name><![CDATA[Steve Jansen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A better FTP client for Windows you already have: Git bash's curl command]]></title>
    <link href="http://steve-jansen.github.io/blog/2014/02/15/a-better-ftp-client-for-windows-you-already-have-gits-curl-command/"/>
    <updated>2014-02-15T17:24:00-05:00</updated>
    <id>http://steve-jansen.github.io/blog/2014/02/15/a-better-ftp-client-for-windows-you-already-have-gits-curl-command</id>
    <content type="html"><![CDATA[<p>My shop has a couple of internal FTP servers to mirror commonly used installers for .Net devs.
Installers for apps like Visual Studio can be huge, so GitHub isn&rsquo;t the best place for this, and
it would also smoke most of our Dropbox quotas.  So an FTP server seems like the 3rd best option.</p>

<p>We are a geographically distributed team, with a VPN to access internal servers.  Even with a reliable
VPN session over ISP fiber connection, I&rsquo;ve experience lots of realiability problems downloading large files
with the native Windows Explorer / Internet Explorer FTP.</p>

<p>The Windows ftp command line client can be a pain to work with.  Fortunately, the Git bash emulator for Windows
(msysgit) includes a MinGW port of the awesome <code>curl</code> utility.  The <code>curl</code> utility has all kinds of awesome features
for downloading large files.</p>

<p>Here&rsquo;s a few options I found really useful:</p>

<p><code>bash
curl -C - -v -O "ftp://ftp.example.com/path/to/file.zip"
</code></p>

<ul>
<li><code>-C -</code> option tells bash to automatically continue an interrupted download, if the server supports this feature.</li>
<li><code>-v</code> prints verbose stats, including an dynamic progress info</li>
<li><code>-O</code> automatically saves the file using the remote file name to the current working directory</li>
</ul>


<p>I crafted this gist to enable downloading a large number of binaries related to .Net development from our FTP server.</p>

<p><div><script src='https://gist.github.com/9378219.js'></script>
<noscript><pre><code>SETLOCAL
PUSHD &quot;%USERPROFILE%\Downloads&quot;

IF NOT EXIST &quot;installers&quot; MKDIR &quot;installers&quot;
CD &quot;installers&quot;

ECHO @ECHO OFF &gt; curl.cmd
ECHO TITLE &quot;%~1&quot; &gt;&gt; curl.cmd
ECHO IF NOT &quot;.%~p1&quot;==&quot;.\&quot; IF NOT EXIST &quot;.%~p1&quot; MKDIR &quot;.%~p1&quot; &gt;&gt; curl.cmd
ECHO PUSHD &quot;.%~p1&quot; &gt;&gt; curl.cmd
ECHO &quot;%ProgramFiles%\Git\bin\curl.exe&quot; -C - -v -O &quot;ftp://ftp.example.com/path/to/installers%~1&quot; ^&amp;^&amp; PAUSE &gt;&gt; curl.cmd

START &quot;&quot; &quot;%COMSPEC%&quot; /D /C &quot;curl.cmd ^&quot;/dotNetFx40_Full_x86_x64.exe^&quot;&quot;
START &quot;&quot; &quot;%COMSPEC%&quot; /D /C &quot;curl.cmd ^&quot;/Internet Information Services 7.5 Express/iisexpress_1_11_x86_en-US.msi^&quot;&quot;
START &quot;&quot; &quot;%COMSPEC%&quot; /D /C &quot;curl.cmd ^&quot;/Internet Information Services 7.5 Express/rewrite_2.0_rtw_x86.msi^&quot;&quot;
START &quot;&quot; &quot;%COMSPEC%&quot; /D /C &quot;curl.cmd ^&quot;/Microsoft SQL Server 2008 Express R2 SP1/SQLEXPRWT_x86_ENU.exe^&quot;&quot;
START &quot;&quot; &quot;%COMSPEC%&quot; /D /C &quot;curl.cmd ^&quot;/Microsoft Visual Studio 2010/VS2010PREM_ENU.zip^&quot;&quot;
START &quot;&quot; &quot;%COMSPEC%&quot; /D /C &quot;curl.cmd ^&quot;/Microsoft Visual Studio 2010 SP1/VS10sp1-KB983509.exe^&quot;&quot;
START &quot;&quot; &quot;%COMSPEC%&quot; /D /C &quot;curl.cmd ^&quot;/Microsoft SQL Server Data Tools/SSDT_10.3.31009.2_EN.iso.zip^&quot;&quot;
START &quot;&quot; &quot;%COMSPEC%&quot; /D /C &quot;curl.cmd ^&quot;/Microsoft SQL Server 2012 Tools/SQLManagementStudio_x86_ENU.exe^&quot;&quot;
START &quot;&quot; &quot;%COMSPEC%&quot; /D /C &quot;curl.cmd ^&quot;/Microsoft SQL Server 2012 Tools/x86/SqlLocaLDB.MSI^&quot;&quot;
START &quot;&quot; &quot;%COMSPEC%&quot; /D /C &quot;curl.cmd ^&quot;/Microsoft Web Deploy V3/WebDeploy_x86_en-US.msi^&quot;&quot;
START &quot;&quot; &quot;%COMSPEC%&quot; /D /C &quot;curl.cmd ^&quot;/MSBuild Extension Pack 4.0/MSBuild Extension Pack 4.0.msi^&quot;&quot;

DEL /Q curl.cmd
POPD
ENDLOCAL</code></pre></noscript></div>
</p>

<p>Be warned, this hack spawns a new command prompt window for each download, so it can get a bit crazy.  This seemed like
the best worst way to download in parallel while also making sense of each download&rsquo;s status.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Breaking the 3GB memory barrier of 32-bit Windows]]></title>
    <link href="http://steve-jansen.github.io/blog/2013/10/03/breaking-the-3gb-memory-barrier-of-32-bit-windows/"/>
    <updated>2013-10-03T22:22:02-04:00</updated>
    <id>http://steve-jansen.github.io/blog/2013/10/03/breaking-the-3gb-memory-barrier-of-32-bit-windows</id>
    <content type="html"><![CDATA[<p>My corporate laptop has 6 GB of RAM installed, but, only sees 3 GB of logical RAM. Why?  My corporate IT department
images laptops with the 32-bit flavor of  Windows 7.</p>

<p>As you can see in this screenshot from my Control Panel&rsquo;s System information applet, installing more memory hits a glass ceiling with Windows at ~3GB.</p>

<p><img src="/images/2013-10-03-A.gif" alt="System information screenshot showing 3GB of RAM" /></p>

<p>My laptop has 6 GB of physical RAM installed, yet my user applications have access to less than half of the physical memory!</p>

<h2>Hacking a Solution: &ldquo;Physical Virtual Memory&rdquo;</h2>

<p>Fortunately, there is a solution to this problem. It&rsquo;s a hack and it uses a reasonably priced piece of 3rd party commercial software.</p>

<p>The solution combines a feature of Windows known as Physical Address Extensions (PAE) in tandem with a RAMDISK as the storage &ldquo;disk&rdquo; for the virtual memory paging file. The result is a total hack &ndash; we&rsquo;re using a page file to expose the address space of physical memory. It&rsquo;s &ldquo;physical virtual&rdquo; memory. An oxymoron if I ever heard one!</p>

<p>A commercial software package called <a href="http://www.romexsoftware.com/en-us/primo-ramdisk/">Primo Ramdisk Standard</a> by Romex Software is needed to create the Ramdisk. It&rsquo;s $30/seat.</p>

<p>This is the only Ramdisk driver I could find that:</p>

<ol>
<li>Supports Windows 7</li>
<li>Supports PAE</li>
<li>Supports the Intel/AMD physical memory remapping (&ldquo;Invisible Memory&rdquo;) chipset feature (<a href="http://www.polywell.com/us/support/faq/4gb_rev1.pdf">read more</a>)</li>
<li>Not flagged as a removable storage device by our corporate data loss prevention nanny software</li>
</ol>


<h2>Performance</h2>

<p>Indeed, the performance of this hack to use &ldquo;physical virtual memory&rdquo; will be less than just using a 64 bit O/S with it&rsquo;s address space of 2<sup>64</sup> bytes. Nevertheless, paging to a RAMDISK will always beat paging to a magnetic hard drive, and will probably beat paging to a SSD disk as well.</p>

<p>I speculate there are a number of very good reasons why corporate IT would deploy 32-bit over 64-bit &ndash; availability of 64-bit client software for VPNs, anti-malware, remote backup agents, remote support agents, encryption policy engines; the difficulty in recreating and testing a new image from scratch; the density of older 32-bit laptops still in use.</p>

<h2>Known Issues</h2>

<p><strong>Caveat Emptor:</strong>  You must disable hibernation mode.  Hibernating sporadically crashes upon shutdown or startup when using this hack.  The good news is you will not miss much.  My laptop clocked faster times with a normal shutdown/startup cycle compared to the time required to enter and exit hibernation.  The disk IO was just too slow to copy 6 GB of RAM contents to into and out of the C:\hiberfil.sys hibernation file.</p>

<h2>Testing</h2>

<p>This setup was tested successfully for over one year on a Lenovo ThinkPad T410 with 6 GB of RAM (2 GB +4 GB DIMMS) as well as one year on a Lenovo T420s with 8 GB of RAM.  Please test your setup.  Should your machine fail to restart after following below steps, you should boot into Windows Safe Mode and disable/uninstall the RAMDISK driver and paging file.</p>

<h3>Setup (8 steps)</h3>

<h2>Step 1</h2>

<p>Enable PAE in the Windows boot options, disable hibernation in the power options for Windows, and reboot the system.</p>

<p>Run the following commands in Command Prompt (cmd.exe).   Note this will force a restart in 30 seconds, so save your work.</p>

<p><code>
bcdedit /set pae ForceEnable
bcdedit /enum | FINDSTR pae
powercfg.exe /hibernate off
shutdown /r /t 30 /d p:1:1
</code></p>

<p><img src="/images/2013-10-03-B.gif" alt="Screenshot of command prompt usage in step 1" /></p>

<h2>Step 2</h2>

<p>Install the commercial software <a href="http://www.romexsoftware.com/en-us/primo-ramdisk/index.html">Primo Ramdisk Standard</a> by a vendor named Romex. There is a $30/seat license cost.  Romex offers a 30 day free trial.</p>

<h2>Step 3</h2>

<p>Launch the Primo Ramdisk configuration program. (&ldquo;%ProgramFiles%\Primo Ramdisk Standard Edition\FancyRd.exe&rdquo;)</p>

<h2>Step 4</h2>

<p>Launch the dialog to configure &ldquo;Invisible Memory Management&rdquo;</p>

<p>Click the icon in the lower right corner of the configuration program that resembles an blue SD Card and a yellow wrench.  On the dialog, click the &ldquo;Enable IM&rdquo; button.  The default options worked successfully a Lenovo ThinkPad T410 (BIOS) and a Lenovo T420s (UEFI).  See the Romex documentation on front-end/back-end reserve if you experience video card problems on your hardware.</p>

<p><img src="/images/2013-10-03-C.gif" alt="Screenshot of configuring &quot;Invisible Memory Management&quot; in step 2" /></p>

<h2>Step 5</h2>

<p>Define a new RAMDISK</p>

<p>a) Take note of the maximum amount of available invisible memory as displayed in the lower right hand corner of the main window.  This will be the size of the RAMDISK.</p>

<p>b) Click the &ldquo;Create a new disk&rdquo; toolbar button to define a new persistent RAMDISK</p>

<p>c) Select &ldquo;Direct-IO&rdquo; as the disk type.  This is the faster of the two options.  Also, Credant will only ignore this device type.</p>

<p>d) Assign a drive letter of &ldquo;Z&rdquo;.  This can be changed, however, a later step will need to be manually adjusted.</p>

<p>e) Leave &ldquo;One Time Disk&rdquo; unchecked to make this disk persistent across boots.</p>

<p>f) On the next dialog screen, enable the option for &ldquo;Use Invisible Memory&rdquo;.  Leave all other options unchecked/disabled.</p>

<p>g) On the final dialog screen, select the FAT32 format and label the device &ldquo;RAMDISK&rdquo;.</p>

<p>Screenshots:</p>

<p><img src="/images/2013-10-03-E.gif" alt="Screenshot of defining a new RAMDISK in step 5" />
<img src="/images/2013-10-03-F.gif" alt="Screenshot of defining a new RAMDISK in step 5" />
<img src="/images/2013-10-03-D.gif" alt="Screenshot of defining a new RAMDISK in step 5" />
<img src="/images/2013-10-03-G.gif" alt="Screenshot of defining a new RAMDISK in step 5" /></p>

<h2>Step 6</h2>

<p>Modify Windows' Virtual Memory settings</p>

<p>a) Run &ldquo;sysdm.cpl&rdquo; to open System Properties</p>

<p>b) Open the virtual memory dialog by selecting  Advanced > Performance > Settings > Advanced > Virtual Memory > Change</p>

<p>c) Uncheck/disable &ldquo;Automatically manage paging file size for all drives&rdquo;</p>

<p>d) Select the &ldquo;C:&rdquo; drive in the drive list, and select the &ldquo;No paging file&rdquo; option.  Click the Set button.</p>

<p>e) Select the &ldquo;Z:&rdquo; drive in the drive list, and select &ldquo;Custom&rdquo; size of X for initial and maximum, where X is the space available listed for the drive. You may need to slightly reduce X by ~5 megabytes.</p>

<p>f) Click the &ldquo;Set&rdquo; button and confirm your settings resemble the screenshot below.  Click the &ldquo;Ok&rdquo; button.</p>

<p><img src="/images/2013-10-03-H.gif" alt="Screenshot of modifying Windows virtual memory settings in step 6" /></p>

<h2>Step 7</h2>

<p>Hide the Z: drive from Explorer</p>

<p>Windows will be very annoying about the Z: drive being full.  You can hide this drive from Explorer and the common dialogs with the following registry setting.  Note you can still explicity access this drive with a full file path in any open/save dialog (e.g., Z:\folder\file.ext). If you changed the drive letter for the RAMDISK from Z: to something else, you will need to adjust the hex value of the registry key (see TechNet for the correct hex value).</p>

<p>Run the following commands in Command Prompt (cmd.exe):</p>

<p><code>
REG add HKCU\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer /v NoDrives /t REG_DWORD /d 0x02000000
REG add HKCU\Software\Microsoft\Windows\CurrentVersion\Policies\Explorer /v NoLowDiscSpaceChecks /t REG_DWORD /d 1
</code></p>

<p><img src="/images/2013-10-03-I.gif" alt="Screenshot of disabling Explorer disk space warnings for the new RAMDISK in step 7" /></p>

<h2>Step 8</h2>

<p>Reboot</p>

<p>It&rsquo;s Windows, why not throw in a reboot?</p>

<h2>Final Thoughts</h2>

<p>My Windows setup recommends 3 GB of virtual memory.  I&rsquo;d like to try upgrading my physical RAM from 6 GB to 8GB.  This would let me add another gigabyte to the paging file.  It would also leave another 1 GB of free space on Z:.  I&rsquo;m considering using this free space as a NTFS junction point with &ldquo;%TEMP%&rdquo; and &ldquo;%SYSTEMROOT%\TEMP&rdquo; to make the temp folders both fast and non-persistent between reboots.  (Junction points are the Windows equivalent of *nix symlinks for directories.  You can use the Sysinternals utility junction.exe or the Primo Ramdisk utility to define junction points.)</p>

<p>I also want to test setting my IIS document root to Z: to make tests of deployment packages lightning fast (i.e., relocating the IIS document root from C:\inetpub to Z:\inetpub).  This will make disk I/O way faster for copying scores of little image and text files.  It also forces me to run an automated build/package/deploy between reboots (since Z:\ is wiped between reboots).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tailoring the Windows Command Prompt Shell]]></title>
    <link href="http://steve-jansen.github.io/blog/2013/02/27/tailoring-the-windows-command-prompt-shell/"/>
    <updated>2013-02-27T14:18:00-05:00</updated>
    <id>http://steve-jansen.github.io/blog/2013/02/27/tailoring-the-windows-command-prompt-shell</id>
    <content type="html"><![CDATA[<p>I spend a lot of time in the Windows Command Prompt.  Most developers I work with don&rsquo;t know some of the tricks up the Command Prompt&rsquo;s sleeve.  So allow me to share some of my favorite settings.</p>

<!-- more -->


<h2>Launching the Command Prompt</h2>

<p>Windows gurus launch the command prompt using the keyboard shortcut <code>Windows Logo Key</code>+<code>R</code> (i.e., &ldquo;Run&rdquo;) > Type <code>cmd.exe</code> then <code>Enter</code>.  This is way faster than navigating the Windows Start Menu to find the Command Prompt.</p>

<h2>Preferences</h2>

<p>Right click the Command Prompt title bar and select &ldquo;Properties&rdquo; from the context menu.  I modify the preferences highlighted in below screenshots to accomplish a few things:</p>

<ul>
<li>make the shell easier on our overtaxed eyes ;)</li>
<li>quicker navigation of the command history (up/down arrows) by removing the noise of duplicate entries</li>
<li>simplify copying text to copy any selected text (by the mouse) when you press enter</li>
<li>simplify pasting text to paste on right click</li>
</ul>


<p><img src="/images/2013-02-27-A.png" alt="Screenshot of the Command Prompt Options tab" /></p>

<p><img src="/images/2013-02-27-B.png" alt="Screenshot of the Command Prompt Options tab" /></p>

<p><img src="/images/2013-02-27-C.png" alt="Screenshot of the Command Prompt Options tab" /></p>

<p><img src="/images/2013-02-27-D.png" alt="Screenshot of the Command Prompt Options tab" /></p>

<h2>Tab and Filename Autocompletion</h2>

<p>The <code>Tab</code> key should auto complete the names of files and folders in the current working directory.  Each press of <code>Tab</code> should cycle to the next name.  The autocompletion is pretty smart &ndash; it will filter the choices based on what you have already typed.   For example, typing <code>D</code> then <code>Tab</code> will autocomplete the first file or folder that starts with the letter &ldquo;D&rdquo;.  Tabbing again will display the next file or folder that start with D.  Tabbing will cycle through a ring of possible matches.</p>

<p>For example, tabbing through the letter &ldquo;D&rdquo; in your user profile directory on Windows 7 might autocomplete &ldquo;Desktop&rdquo;, &ldquo;Documents&rdquo;, &ldquo;Downloads&rdquo;, and then back to &ldquo;Desktop&rdquo;.  Autocomplete will even quote paths with spaces, which is a nice trick.  I often see experienced developers stuggle to find a filepath, repeatedly doing <code>DIR</code> and <code>CD</code> commands to just run a single batch script.</p>

<p>One small shortcoming is autocomlete cannot expand environmental variables like <code>%ProgramFiles%</code> or <code>%UserProfile%</code>.  Although you can use <code>Windows logo key</code> + <code>R</code> Run dialog to autocomplete environmental variables.</p>

<p>Autocompletion saves you a bunch of typing with just a key or two to filter your choices, tabbing until you find the folder you want,  pressing <code>\</code> to start tabbing through the subfolder, and repeat.  And it makes you look more competent when pair programming.</p>

<h2>Command History</h2>

<p>The <code>DOSKEY</code> utility is similar to the <code>history</code> utility on Unix/Linux shells.  Most developers know you can press the up arrow or down arrow to cycle through the history of issued commands.</p>

<p>Most developers (and even sysadmins) aren&rsquo;t aware of the advanced keyboard shortcuts wired to <code>DOSKEY</code>:</p>

<ul>
<li>UP and DOWN ARROWS recall commands</li>
<li><code>ESC</code> clears command line</li>
<li><code>F7</code> displays command history</li>
<li><code>ALT</code>+<code>F7</code> clears command history</li>
<li><code>F8</code> searches command history</li>
<li><code>F9</code> selects a command by number</li>
</ul>


<p>Example of pressing <code>ALT</code>+<code>F7</code> to view the command history:
<img src="/images/2013-02-27-E.png" alt="Screenshot of the visual command history" /></p>

<p>Example of pressing <code>F9</code> to recall a command by history number:
<img src="/images/2013-02-27-F.png" alt="Screenshot of the visual command history" /></p>

<p>Example of pressing <code>F8</code> to cycle through history entries matching the text &ldquo;D&rdquo; already typed into the comamnd line buffer:
<img src="/images/2013-02-27-G.png" alt="Screenshot of the visual command history" /></p>
]]></content>
  </entry>
  
</feed>
