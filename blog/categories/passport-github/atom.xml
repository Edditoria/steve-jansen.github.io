<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: passport-github | /* steve jansen */]]></title>
  <link href="http://steve-jansen.github.com/blog/categories/passport-github/atom.xml" rel="self"/>
  <link href="http://steve-jansen.github.com/"/>
  <updated>2013-08-27T22:18:30-04:00</updated>
  <id>http://steve-jansen.github.com/</id>
  <author>
    <name><![CDATA[Steve Jansen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Wiring together Express, Passport OAuth, and Swagger in NodeJS]]></title>
    <link href="http://steve-jansen.github.com/blog/2013/08/22/wiring-together-passport-swagger-express/"/>
    <updated>2013-08-22T22:07:00-04:00</updated>
    <id>http://steve-jansen.github.com/blog/2013/08/22/wiring-together-passport-swagger-express</id>
    <content type="html"><![CDATA[<p>I spent a couple of hours tonight sorting out how to wire a NodeJS Express app to use both
the <a href="http://passportjs.org/guide/">Passport authentication strategy for GitHub OAuth</a> with
<a href="https://github.com/wordnik/swagger-node-express">Swagger for Express</a>.  Normally, this
would be fairly straightforward.  A wrinkle with other examples is I needed to disallow
all anonymous access for an intranet app.</p>

<p>I'm a big fan of Swagger UI - it's a great, DRY way to auto-document your REST APIs. I expected Swagger
to be a natural fit with NodeJS.  Suprisingly, I found the Swagger.Net implmentation for .Net's WebAPI
to be considerably easier to use compared to the NodeJS implementation.
Swagger.Net easily drops into an existing WebAPI project.  Not so with NodeJS.</p>

<p>In Node, you really have to write your REST APIs from the ground up using the Swagger packge.  The other
wacky part for me was you need two Express apps side-by-side to handle requests for both REST APIs and
static content.</p>

<p>```js
var express = require('express'),</p>

<pre><code>app     = express(),
subapp  = express(),;
swagger = require('./lib/swagger/swagger');
</code></pre>

<p>```</p>

<p>As we'll see below, the <code>subapp</code> sandboxes the Swagger package to the <code>/api/*</code> route.</p>

<p><em>(I use a local copy of the swagger-node-express package downloaded to my source tree because I found that
the npm package was considerably outdated compared to the master branch of the swagger-node-express repo.)</em></p>

<p>Next, we configure PassportJS to use GitHub OAuth.  GitHub will POST back to the route
<code>/auth/github/callback</code> upon successful authentication.</p>

<p>```js
var passport       = require('passport'),</p>

<pre><code>GitHubStrategy = require('passport-github').Strategy;
</code></pre>

<p>passport.use(new GitHubStrategy({</p>

<pre><code>clientID: config['OAUTH_ID'],
clientSecret: config['OAUTH_TOKEN'],
callbackURL: '/auth/github/callback'
</code></pre>

<p>  },
  function(accessToken, refreshToken, profile, done) {</p>

<pre><code>var user = {
  id: profile.username,
  email: (profile.emails.length) ? profile.emails[0].value : null,
  gravatar: profile._json.gravatar_id
};
return done(null, user);
</code></pre>

<p>  }
));
```</p>

<p>For my needs, I got away with serializing the 3 user properties I need to a session cookie:</p>

<p>```js
passport.serializeUser(function(user, done) {
  done(null, user);
});</p>

<p>passport.deserializeUser(function(user, done) {
  done(null, user);
});
```</p>

<p>A critical piece of wiring is a reusable function to verify authentication:</p>

<p>```js
// middleware to ensure user is authenticated
function authenticate(req, res, next) {
  if (req.isAuthenticated()) {</p>

<pre><code>return next(); 
</code></pre>

<p>  }
  if (req.headers['x-requested-with'] === 'XMLHttpRequest') {</p>

<pre><code>res.send("Authentication required", 401);
</code></pre>

<p>  } else {</p>

<pre><code>res.redirect('/login');
</code></pre>

<p>  }
}
```</p>

<p>The next key wiring is to configure both Express apps to use Passport as well as our <code>authenticate</code> function.
This approach prevents infinite OAuth HTTP 302 redirects:</p>

<p><code>``js
// configure express to use swagger for the</code>/api` route
subpath.configure(function() {
  subpath.use(express.cookieParser());
  subpath.use(express.bodyParser());
  subpath.use(express.methodOverride());
  subpath.use(express.session({ secret: config['SESSION_TOKEN'] }));
  subpath.use(passport.initialize());
  subpath.use(passport.session());
  subpath.use(authenticate);
  swagger.setAppHandler(subpath);
});</p>

<p>// configure express for the static content on the <code>/</code> route
app.configure(function() {
  app.use(express.cookieParser());
  app.use(express.bodyParser());
  app.use(express.methodOverride());
  app.use(express.session({ secret: config['SESSION_TOKEN'] }));
  app.use(passport.initialize());
  app.use(passport.session());
  app.use(app.router);
  app.use(authenticate);
  app.use('/api', subpath); /<em> mount <code>/api</code> using the subapp </em>/
  // default document middleware for swagger/index.html
  app.use('/swagger', function(req, res, next) {</p>

<pre><code>if (req.url === '/swagger') {
  res.redirect('/swagger/');
}
next();
</code></pre>

<p>  });
  app.use('/swagger', express.static(path.join(<strong>dirname, 'public/swagger')));
  app.use(express.static(path.join(</strong>dirname, 'public/client')));
});
```</p>

<p>Finally, we define routes to handle OAuth logins and callbacks, then configure Swagger using the
route <code>/api/doc</code>, and finally start the server.</p>

<p>``` js
// GitHub OAuth routes
app.get('/login', passport.authenticate('github'));
app.get('/auth/github/callback',  passport.authenticate('github', { successReturnToOrRedirect: '/', failureRedirect: '/login' }));</p>

<p>// Swagger configuration
swagger.addModels(require('./models'));
swagger.addGet(require('./controllers/user').get);
swagger.configureSwaggerPaths('', '/doc', '');
swagger.configure('', require('../package.json').version);</p>

<p>app.listen(8080);
```</p>
]]></content>
  </entry>
  
</feed>
