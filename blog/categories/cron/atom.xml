<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: cron | /* steve jansen */]]></title>
  <link href="http://steve-jansen.github.io/blog/categories/cron/atom.xml" rel="self"/>
  <link href="http://steve-jansen.github.io/"/>
  <updated>2014-12-01T13:21:43-05:00</updated>
  <id>http://steve-jansen.github.io/</id>
  <author>
    <name><![CDATA[Steve Jansen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to use Jenkins to monitor cron jobs]]></title>
    <link href="http://steve-jansen.github.io/blog/2014/11/20/how-to-use-jenkins-to-monitor-cron-jobs/"/>
    <updated>2014-11-20T17:46:46-05:00</updated>
    <id>http://steve-jansen.github.io/blog/2014/11/20/how-to-use-jenkins-to-monitor-cron-jobs</id>
    <content type="html"><![CDATA[<p>Cron jobs have a funny way of being ignored.  Either no one knows the job is failing because the job
doesn&rsquo;t tell anyone.   Or, the job is spamming your e-mail inbox many times a day, regardless of success
or failure, which means you just ignore the e-mails.</p>

<p>I&rsquo;ve seen the &ldquo;Monitor an external job&rdquo; option for new Jenkins jobs before, and never paid much attention.
Turns out it&rsquo;s a great bucket for storing logs and results of cron jobs.</p>

<p>The <a href="https://wiki.jenkins-ci.org/display/JENKINS/Monitoring+external+jobs">external-monitor-job</a> plugin
seems to ship with the Jenkins war file.  So, your Jenkins should have it out of the box.</p>

<p>Creating a job is pretty simple.  It&rsquo;s just a name and description.  Click &ldquo;New Item&rdquo; in Jenkins and
select the &ldquo;Monitor an external job&rdquo; option.  This creates a job of type <code>hudson.model.ExternalJob</code>.</p>

<p>The <a href="https://wiki.jenkins-ci.org/display/JENKINS/Monitoring+external+jobs">wiki</a> describes a
fairly complicated method to download the Jenkins jar files onto the server running
your cron jobs, and then use the Java runtime to run a jar with your cron script as an
argument.  The jar presumably forks your a new shell to run your desired cron command and
sends the output/result to Jenkins.</p>

<p>There&rsquo;s a much easier way to do this.  Redirect or <code>tee</code> your job&rsquo;s stdout/stderr output to a
temp file.  Then post the result code and log file via <code>curl</code> to Jenkins.  No need to
download jar files.  No need to even have Java runtime on the server.</p>

<p>Just POST a small XML document with the log contents (binary encoded) and the
exit code to Jenkins @ <code>/job/:jobName/postBuildResult</code> where <code>:jobName</code> is the
URL encoded name of your monitoring job in Jenkins.</p>

<p>``` bash [example cron script]</p>

<h1>!/bin/sh</h1>

<h1>example cron script to post logs to Jenkins</h1>

<h1>exit on error</h1>

<p>set -e</p>

<p>log=<code>mktemp -t tmp</code>
timer=<code>date +"%s"</code>
jenkins_job=my_monitoring_job
jenkins_server=<a href="http://jenkins.example.com:8080/jenkins/job/$jenkins_job/postBuildResult">http://jenkins.example.com:8080/jenkins/job/$jenkins_job/postBuildResult</a></p>

<h1>see <a href="http://jenkins.example.com:8080/me/configure">http://jenkins.example.com:8080/me/configure</a> to get your username and API token</h1>

<p>jenkins_username=myusername
jenkins_token=abcdef0123456789fedcba9876543210</p>

<p>function banner() {
  echo $(printf &lsquo;#%.0s&rsquo; {1..80}) >> &ldquo;$log&rdquo;
}</p>

<p>function report() {
  result=$?
  timer=$((<code>date +"%s"</code> &ndash; $timer))</p>

<p>  banner
  echo &ldquo;<code>whoami</code>@<code>hostname -f</code> <code>date</code>: elapsed $timer second(s)&rdquo; >> &ldquo;$log&rdquo;
  echo &ldquo;exit code $result&rdquo; >> &ldquo;$log&rdquo;</p>

<p>  # binary encode the log file for Jenkins
  msg=<code>cat "$log" | hexdump -v -e '1/1 "%02x"'</code></p>

<p>  # post the log to jenkins
  echo curl -X POST \</p>

<pre><code>   -u "$jenkins_username:$jenkins_token" \
   -d "&lt;run&gt;&lt;log encoding=\"hexBinary\"&gt;$msg&lt;/log&gt;&lt;result&gt;$result&lt;/result&gt;&lt;duration&gt;$timer&lt;/duration&gt;&lt;/run&gt;" \
    $jenkins_server/job/$jenkins_job/postBuildResult
</code></pre>

<p>}</p>

<p>trap report EXIT;</p>

<p>banner
echo &ldquo;hello, world @ <code>date</code>!&rdquo; | tee &ldquo;$log&rdquo;
```</p>

<p><code>bash [sample `crontab -e` entry]
MAILTO=""
0 * * * * /bin/sh /your/directory/myjob.sh
</code></p>

<p>A sample of the build log on Jenkins with a green/red build status:</p>

<p><img src="images/2014-11-20.png" alt="Sample Jenkins Build Log" /></p>

<p>Credit to <a href="http://stackoverflow.com/a/25611940/1995977">Taytay on Stackoverflow.com</a>
for figuring out how to use <code>hexdump</code> to properly encode the XML for Jenkins.</p>
]]></content>
  </entry>
  
</feed>
