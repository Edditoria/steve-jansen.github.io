<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: grunt | /* steve jansen */]]></title>
  <link href="http://steve-jansen.github.com/blog/categories/grunt/atom.xml" rel="self"/>
  <link href="http://steve-jansen.github.com/"/>
  <updated>2013-08-27T23:09:31-04:00</updated>
  <id>http://steve-jansen.github.com/</id>
  <author>
    <name><![CDATA[Steve Jansen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[For all UI devs out there...json-proxy v0.10.0]]></title>
    <link href="http://steve-jansen.github.com/blog/2013/08/20/for-all-ui-devs-out-there-json-proxy-v0-dot-10-dot-0/"/>
    <updated>2013-08-20T21:44:00-04:00</updated>
    <id>http://steve-jansen.github.com/blog/2013/08/20/for-all-ui-devs-out-there-json-proxy-v0-dot-10-dot-0</id>
    <content type="html"><![CDATA[<p>To all my UI devs out there, I finally had some time to rework json-proxy into a lean and meaner machine.</p>

<p>If you haven't seen the proxy before, it enables a UI dev to proxy localhost URLs to a remote server.</p>

<p>Why do this?   Say you are doing an AngularJS front end, and want to wire some data to a REST API call like <code>$http.get('/api/foo/1')</code>.
Before, you had to mock out the JSON result, run the entire server stack locally, or just cross your fingers and hope it works on the integration server.</p>

<p>Well, the proxy lets you transparently reroute <code>http://localhost/api/foo/1</code> from your local laptop to an integration server
like <code>http://integration-server/api/foo/1</code>.  No CORS.  No JSONP.  No nonsense.</p>

<h3>Grunt</h3>

<p>With v0.1.0, the big change is the proxy now works right inside the Grunt server.   Here's an example config from the scaffold project:</p>

<p>```js
connect: {
  options: {</p>

<pre><code>port: 9000,
// Change this to '0.0.0.0' to access the server from outside.
hostname: 'localhost'
</code></pre>

<p>  },
  livereload: {</p>

<pre><code>options: {
  middleware: function (connect) {
    return [
      require('json-proxy').initialize({
        proxy: {
          forward: {
            '/api/': 'http://integration-server:4040',
            '/swagger/': 'http://integration-server:4040',
          },
          headers: {
            'X-Forwarded-User': 'John Doe',
            'X-Forwarded-User-Email': 'john.doe@example.com'
          }
        }
      }),
      lrSnippet,
      mountFolder(connect, '.tmp'),
      mountFolder(connect, yeomanConfig.app)
    ];
  }
}
</code></pre>

<p>  },
```</p>

<h3>Auth Headers</h3>

<p>Even better, you can inject headers into proxied request.  So if you remote server requires an Authorization header with an OAuth-style token, or sits behind an Enterprise SSO appliance, you can add the headers to deal with bypassing the remote server authentication.</p>

<h3>CLI</h3>

<p>The CLI utility is also improved.  The CLI properly supports global installation.
If you install using <code>sudo npm install -g json-proxy</code>, you can invoke the proxy simply as <code>json-proxy</code> with whatever args you want.</p>

<h3>CLI usage info:</h3>

<p>```bash
json-proxy [-c configFile] [-p port] [-f proxy forwarding rule]</p>

<pre><code>         [-h header rule] [-html5mode [defaultFile]] [directory]
</code></pre>

<p>Examples:
   json-proxy -p 8080 -f "/api=http://server" -f "/=http://localhost:9000" .
   json-proxy -h "X-Forwarded-User=johndoe" /tmp/folder
   json-proxy -c "/tmp/config.json"</p>

<p>By default, looks for a config file at ./json-proxy.json</p>

<p>Environmental variables:
  JSON_PROXY_PORT         see --port
  JSON_PROXY_WEBROOT      directory
  JSON_PROXY_GATEWAY      --gateway
  JSON_PROXY_GATEWAY_AUTH "username:password" credentials for --gateway)</p>

<p>Options:
  -p, --port     The TCP port for the proxy server                    <br/>
  -f, --forward  a forwarding rule (ex. /foo=server/foo)              <br/>
  -h, --header   a custom request header (ex. iv-user=johndoel)       <br/>
  -c, --config   a config file                                        <br/>
  -g, --gateway  URL for a LAN HTTP proxy to use for forwarding requests
  --html5mode    support AngularJS HTML5 mode by catching 404s        <br/>
  -?, --help     about this utility                                   <br/>
  --version      version info          <br/>
```</p>

<p>More info @ <a href="https://github.com/steve-jansen/json-proxy">https://github.com/steve-jansen/json-proxy</a> and
<a href="https://npmjs.org/package/json-proxy">https://npmjs.org/package/json-proxy</a></p>

<p>Enjoy!</p>
]]></content>
  </entry>
  
</feed>
