<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: grunt | /* steve jansen */]]></title>
  <link href="http://steve-jansen.github.io/blog/categories/grunt/atom.xml" rel="self"/>
  <link href="http://steve-jansen.github.io/"/>
  <updated>2014-12-15T14:46:36-05:00</updated>
  <id>http://steve-jansen.github.io/</id>
  <author>
    <name><![CDATA[Steve Jansen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[json-proxy release 0.2.0]]></title>
    <link href="http://steve-jansen.github.io/blog/2014/07/19/json-proxy-release-0-dot-2-0/"/>
    <updated>2014-07-19T10:20:56-04:00</updated>
    <id>http://steve-jansen.github.io/blog/2014/07/19/json-proxy-release-0-dot-2-0</id>
    <content type="html"><![CDATA[<p>Happy to announce a new release of <a href="https://www.npmjs.org/package/json-proxy">json-proxy</a>, a
utility for HTML5 devs to run apps locally and proxy calls like <a href="http://localhost:9000/api">http://localhost:9000/api</a> to
a remote server, all without CORS or JSONP.</p>

<h2>Grunt Plugin</h2>

<p>This release includes better support for running as a grunt plugin.
A <a href="https://github.com/gruntjs/grunt-contrib-connect/pull/85">change in grunt-contrib-connect@0.8.0</a>
simplifies life for proxy plugins inside the livereload task of <code>grunt serve</code>:</p>

<p>```js
livereload: {
  options: {</p>

<pre><code>middleware: function(connect, options, middlewares) {
  // inject json-proxy to the front of the default middlewares array
  // requires grunt-contrib-connect v0.8.0+
  middlewares.unshift(
    require('json-proxy').initialize({
      proxy: {
        forward: {
          '/api/': 'http://api.example.com:8080'
        },
        headers: {
          'X-Forwarded-User': 'John Doe'
        }
      }
    })
  );

  return middlewares;
}
</code></pre>

<p>  }
}
```</p>

<h2>SSL Endpoints</h2>

<p>This release adds support for proxying to HTTPS endpoints.   Here&rsquo;s a sample
config to forward <a href="http://localhost:9000/channel">http://localhost:9000/channel</a> to <a href="https://www.youtube.com/channel">https://www.youtube.com/channel</a> .</p>

<p>```
{
  &ldquo;proxy&rdquo;: {</p>

<pre><code>  "forward": {
    "/channel": "https://www.youtube.com:443"
}
</code></pre>

<p>  }
}
```</p>

<h2>HTTP Proxy Gateways and Basic Authentication</h2>

<p>You can now pass your authentication credentials to a HTTP proxy gateway on
your LAN via the <code>proxy.gateway.auth</code> config setting.  The setting value
uses the <code>username:password</code> format for HTTP basic authentication
(without base64 encoding).  Here&rsquo;s an example config to proxying remote request
via <a href="http://proxy.example.com:8080">http://proxy.example.com:8080</a> as <code>proxyuser</code> with password <code>C0mp13x_!d0rd$$@P!</code></p>

<p>```
var config = {
  &ldquo;proxy&rdquo;: {</p>

<pre><code>"gateway": {
  "protocol: "http:",
  "host": "proxy.example.com",
  "port": 8080,
  "auth": "proxyuser:C0mp13x_!d0rd$$@P!" /** 'user:password' **/
},  
"forward": {
  "/api": "http://api.example.com",
  "/foo/\\d+/bar": "http://www.example.com",
  "/secure/": "https://secure.example.com"
}
</code></pre>

<p>  }
};
```</p>

<h2>Upgrade to NodeJitsu http-proxy v1.1</h2>

<p>This release required heavy refactoring to use the
<a href="https://github.com/nodejitsu/node-http-proxy/blob/master/UPGRADING.md">latest bits of Nodejitsu&rsquo;s http-proxy v1.1</a></p>

<p>This was necessary since version prior to 1.0 are no longer actively supported.</p>

<h2>Housekeeping</h2>

<p>There&rsquo;s better unit test coverage, and the code validates against a
reasonable set of jshint linting rules.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[For all UI devs out there...json-proxy v0.10.0]]></title>
    <link href="http://steve-jansen.github.io/blog/2013/08/20/for-all-ui-devs-out-there-json-proxy-v0-dot-10-dot-0/"/>
    <updated>2013-08-20T21:44:00-04:00</updated>
    <id>http://steve-jansen.github.io/blog/2013/08/20/for-all-ui-devs-out-there-json-proxy-v0-dot-10-dot-0</id>
    <content type="html"><![CDATA[<p>To all my UI devs out there, I finally had some time to rework json-proxy into a lean and meaner machine.</p>

<p>If you haven&rsquo;t seen the proxy before, it enables a UI dev to proxy localhost URLs to a remote server.</p>

<p>Why do this?   Say you are doing an AngularJS front end, and want to wire some data to a REST API call like <code>$http.get('/api/foo/1')</code>.
Before, you had to mock out the JSON result, run the entire server stack locally, or just cross your fingers and hope it works on the integration server.</p>

<p>Well, the proxy lets you transparently reroute <code>http://localhost/api/foo/1</code> from your local laptop to an integration server
like <code>http://integration-server/api/foo/1</code>.  No CORS.  No JSONP.  No nonsense.</p>

<h3>Grunt</h3>

<p>With v0.1.0, the big change is the proxy now works right inside the Grunt server.   Here&rsquo;s an example config from the scaffold project:</p>

<p>```js
connect: {
  options: {</p>

<pre><code>port: 9000,
// Change this to '0.0.0.0' to access the server from outside.
hostname: 'localhost'
</code></pre>

<p>  },
  livereload: {</p>

<pre><code>options: {
  middleware: function (connect) {
    return [
      require('json-proxy').initialize({
        proxy: {
          forward: {
            '/api/': 'http://integration-server:4040',
            '/swagger/': 'http://integration-server:4040',
          },
          headers: {
            'X-Forwarded-User': 'John Doe',
            'X-Forwarded-User-Email': 'john.doe@example.com'
          }
        }
      }),
      lrSnippet,
      mountFolder(connect, '.tmp'),
      mountFolder(connect, yeomanConfig.app)
    ];
  }
}
</code></pre>

<p>  },
```</p>

<h3>Auth Headers</h3>

<p>Even better, you can inject headers into proxied request.  So if you remote server requires an Authorization header with an OAuth-style token, or sits behind an Enterprise SSO appliance, you can add the headers to deal with bypassing the remote server authentication.</p>

<h3>CLI</h3>

<p>The CLI utility is also improved.  The CLI properly supports global installation.
If you install using <code>sudo npm install -g json-proxy</code>, you can invoke the proxy simply as <code>json-proxy</code> with whatever args you want.</p>

<h3>CLI usage info:</h3>

<p>```bash
json-proxy [-c configFile] [-p port] [-f proxy forwarding rule]</p>

<pre><code>         [-h header rule] [-html5mode [defaultFile]] [directory]
</code></pre>

<p>Examples:
   json-proxy -p 8080 -f &ldquo;/api=<a href="http://server">http://server</a>&rdquo; -f &ldquo;/=<a href="http://localhost:9000">http://localhost:9000</a>&rdquo; .
   json-proxy -h &ldquo;X-Forwarded-User=johndoe&rdquo; /tmp/folder
   json-proxy -c &ldquo;/tmp/config.json&rdquo;</p>

<p>By default, looks for a config file at ./json-proxy.json</p>

<p>Environmental variables:
  JSON_PROXY_PORT         see &mdash;port
  JSON_PROXY_WEBROOT      directory
  JSON_PROXY_GATEWAY      &mdash;gateway
  JSON_PROXY_GATEWAY_AUTH &ldquo;username:password&rdquo; credentials for &mdash;gateway)</p>

<p>Options:
  -p, &mdash;port     The TCP port for the proxy server                    <br/>
  -f, &mdash;forward  a forwarding rule (ex. /foo=server/foo)              <br/>
  -h, &mdash;header   a custom request header (ex. iv-user=johndoel)       <br/>
  -c, &mdash;config   a config file                                        <br/>
  -g, &mdash;gateway  URL for a LAN HTTP proxy to use for forwarding requests
  &mdash;html5mode    support AngularJS HTML5 mode by catching 404s        <br/>
  &ndash;?, &mdash;help     about this utility                                   <br/>
  &mdash;version      version info          <br/>
```</p>

<p>More info @ <a href="https://github.com/steve-jansen/json-proxy">https://github.com/steve-jansen/json-proxy</a> and
<a href="https://npmjs.org/package/json-proxy">https://npmjs.org/package/json-proxy</a></p>

<p>Enjoy!</p>
]]></content>
  </entry>
  
</feed>
