<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: devops | /* steve jansen */]]></title>
  <link href="http://steve-jansen.github.io/blog/categories/devops/atom.xml" rel="self"/>
  <link href="http://steve-jansen.github.io/"/>
  <updated>2015-08-26T09:28:23-04:00</updated>
  <id>http://steve-jansen.github.io/</id>
  <author>
    <name><![CDATA[Steve Jansen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Parsing Jenkins secrets in a shell script]]></title>
    <link href="http://steve-jansen.github.io/blog/2014/12/16/parsing-jenkins-secrets-in-a-shell-script/"/>
    <updated>2014-12-16T14:39:54-05:00</updated>
    <id>http://steve-jansen.github.io/blog/2014/12/16/parsing-jenkins-secrets-in-a-shell-script</id>
    <content type="html"><![CDATA[<p>The <a href="https://wiki.jenkins-ci.org/display/JENKINS/Credentials+Binding+Plugin">Jenkins credentials-binding plugin</a>
provides a convenient way to securely store secrets like usernames/passwords in
Jenkins.  You can even inject these secrets into build steps as environmental
variables in a job like this:</p>

<p><img src="/images/2014-12-16.png" alt="screenshot of a Jenkins job using the credentials-binding plugin" /></p>

<p>For a username/password pair, the plugin will inject the pair as a single value
joined by <code>:</code>.  You can split the credentials into their respective parts
using <a href="http://spin.atomicobject.com/2014/02/16/bash-string-maniuplation/">bash string manipulation operators like <code>%</code> and <code>#</code></a>.</p>

<p>Assuming you configured the job to inject a variable named <code>CREDENTIALS</code>, you can do:</p>

<p>``` bash [parsing Jenkins secret credentials with bash]
USERNAME=${CREDENTIALS%:<em>}
PASSWORD=${CREDENTIALS#</em>:}</p>

<h1>proof of concept &ndash; don&rsquo;t echo this in real life :)</h1>

<p>echo USERNAME=$USERNAME
echo USERNAME=$PASSWORD
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jenkins Job to export Rackspace Cloud DNS Domain As BIND Zone Files]]></title>
    <link href="http://steve-jansen.github.io/blog/2014/12/15/jenkins-job-to-export-rackspace-cloud-dns-domain-as-bind-zone-files/"/>
    <updated>2014-12-15T09:39:33-05:00</updated>
    <id>http://steve-jansen.github.io/blog/2014/12/15/jenkins-job-to-export-rackspace-cloud-dns-domain-as-bind-zone-files</id>
    <content type="html"><![CDATA[<p>Rackspace Cloud DNS offeres a great web console, along with a solid API for managing
DNS records dynamically from CM tools like Chef.</p>

<p>The web UI @ <a href="https://mycloud.rackspace.com">https://mycloud.rackspace.com</a> doesn&rsquo;t (yet) suppport an action to
export your domain(s) to standard BIND format zone files.</p>

<p>However, the API does support zone file exports,
<a href="http://docs.rackspace.com/cdns/api/v1.0/cdns-devguide/content/GET_exportDomain_v1.0__account__domains__domainId__export_domains.html"><code>GET /v1.0/{account}/domains/{domainId}/export</code></a>.</p>

<p>I wanted to create a scheduled Jenkins job to export a domain managed by
Cloud DNS to GitHub for both versioning and disaster recovery.</p>

<p>One gotcha with the API is it&rsquo;s asynchronous &ndash; you request an export, then
periodically poll on the status of the export.  The API also has rate limiting.
So, the export is a bit more involved than a simple <code>curl</code> call.</p>

<p>Based on <a href="https://community.rackspace.com/products/f/25/t/1743">this Rackspace community support post</a>,
I found a great python utility, <a href="https://github.com/wichert/clouddns">clouddns.py by Wichert Akkerman</a>.</p>

<blockquote><p>Note: I couldn&rsquo;t use the <a href="https://github.com/rackspace/pyrax">https://github.com/rackspace/pyrax</a> official SDK,
as I&rsquo;m on CentOS 6.5 with Python 2.6, and the SDK requires Python 2.7.  I also tried
the <a href="https://gist.github.com/DavidWittman/4727690">gist by DavidWittman</a> but failed
to get it working with the LON region despte following
<a href="https://github.com/rackerlabs/python-clouddns/blob/master/README.rst">the clouddns README</a></p></blockquote>

<p>Here&rsquo;s the basis of the script I used in a Jenkins job to export a domain and subdomains
every 15 minutes, alongw with the Git publisher for Jenkins to push the changes back to
a GitHub repo.</p>

<p><div><script src='https://gist.github.com/14dddef6fa0318761e3c.js'></script>
<noscript><pre><code>#!/bin/bash
# exports DNS records from Rackspace Cloud DNS to text files
# Depends on https://github.com/wichert/clouddns/blob/master/src/clouddns.py

set -e

me=export-zone
base_domain=
rackspace_region=
rackspace_rate_limit_delay=3
script_root=$(cd `dirname &quot;${BASH_SOURCE[0]}&quot;` &amp;&amp; pwd)

function usage() {
  cat &lt;&lt; EOF
Usage: `basename &quot;${BASH_SOURCE[0]}&quot;` [domain]
  exports a Racksapce Cloud DNS domain and subdomains to zone files&quot;

  domain - an optional filter for the domain to export, defaults to all
EOF
  exit 1
}

[ &quot;$1&quot; == &quot;-?&quot; ] &amp;&amp; usage
[ &quot;$1&quot; == &quot;--help&quot; ] &amp;&amp; usage

echo &quot;[$me] verifying Rackspace API credentials ...&quot;
if [ -z &quot;$OS_USERNAME&quot; ] || [ -z &quot;$OS_PASSWORD&quot; ]; then
  echo &quot;[$me] error - missing rackspace credentials - you may need a openrc file&quot; &gt;&amp;2
  echo &quot;[$me] see http://docs.rackspace.com/servers/api/v2/cs-gettingstarted/content/section_gs_install_nova.html#d6e1129&quot; &gt;&amp;2
  exit 1
fi

if echo &quot;$OS_REGION_NAME&quot; | grep -i &quot;LON&quot; &gt;/dev/null 2&gt;&amp;1; then
  rackspace_region=uk
else
  rackspace_region=us
fi

echo &quot;[$me] verifying python dependencies ...&quot;
if ! python --version &gt;/dev/null 2&gt;&amp;1; then
  echo &quot;[$me] error - python runtime not found&quot; &gt;&amp;2
  echo &quot;[$me] see https://www.python.org/downloads/&quot; &gt;&amp;2
  exit 2
fi

if ! pip --version &gt;/dev/null 2&gt;&amp;1; then
  echo &quot;[$me] error - missing python dependency - pip&quot; &gt;&amp;2
  echo &quot;[$me] see https://pip.pypa.io/en/latest/installing.html&quot; &gt;&amp;2
  exit 2
fi

if ! pip install --user isodate &gt;/dev/null; then
  echo &quot;[$me] error - pip install isodate failed&quot; &gt;&amp;2
  exit 3
fi

if ! pip install --user requests &gt;/dev/null; then
  echo &quot;[$me] error - pip install requets failed&quot; &gt;&amp;2
  exit 3
fi

echo &quot;[$me] downloading wichert/clouddns from GitHub ...&quot;
curl -L -o &quot;$script_root/clouddns.py&quot; &#39;https://raw.githubusercontent.com/wichert/clouddns/master/src/clouddns.py&#39;

if [ -z &quot;$1&quot; ]; then
  base_domain=&quot;.&quot;
else
 base_domain=&quot;$1&quot;
fi

clouddns_command=&quot;python &quot;&quot;$script_root/clouddns.py&quot;&quot; --region &quot;&quot;$rackspace_region&quot;&quot; \
                                                      --username &quot;&quot;$OS_USERNAME&quot;&quot; \
                                                      --api &quot;&quot;$OS_PASSWORD&quot;&quot;&quot;

echo &quot;[$me] exporting zone files for $base_domain ...&quot;
domain_list=`$clouddns_command list | \
             awk &#39;{print $1}&#39; | \
             grep &quot;$base_domain&quot; | \
             sort`

for domain in $domain_list;
do
  echo &quot;[$me] exporting $domain ...&quot;
  # ignore errors in exporting a subdomain, which can happen due to rate limiting
  # assume the next run will export the subdomain
  set +e
  $clouddns_command export-zone &quot;$domain&quot; &gt; &quot;$domain.txt&quot;
  set -e

  # avoid Rackspace API rate limiting errors
  echo &quot;[$me] sleeping $rackspace_rate_limit_delay seconds ...&quot;
  sleep $rackspace_rate_limit_delay
done

exit 0
</code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Troubleshooting GitHub WebHooks SSL Verification]]></title>
    <link href="http://steve-jansen.github.io/blog/2014/12/03/troubleshooting-github-webhooks-ssl-verification/"/>
    <updated>2014-12-03T10:28:37-05:00</updated>
    <id>http://steve-jansen.github.io/blog/2014/12/03/troubleshooting-github-webhooks-ssl-verification</id>
    <content type="html"><![CDATA[<p>GitHub WebHooks and Jenkins go together like peanut butter and jelly.
<a href="http://kohsuke.org/2011/12/01/polling-must-die-triggering-jenkins-builds-from-a-git-hook/">SCM Webhook trggers are way more efficient for Jenkins over SCM polling</a>.  Webhooks also give you a great UX &ndash; Jenkins reacts
immediately when you push a commit or open a pull request.</p>

<p>I am a huge fan of using <a href="https://github.com/jenkinsci/github-oauth-plugin">GitHub OAuth for single sign on with Jenkins</a>.
The security of OAuth really depends on TLS/SSL for protecting the token in transit,
so your Jenkins should use SSL when using GitHub OAuth.</p>

<p>GitHub&rsquo;s Webhooks have the option to perform SSL certificate validation.  I&rsquo;ve
run into issues with GitHub&rsquo;s &ldquo;Hookshot&rdquo; HTTP engine failing SSL verification for
otherwise valid certificates.  Most of my problems were related to installing
intermediate CA certificates on Jenkins.</p>

<h2>GitHub WebHook configuration and SSL certificate verification</h2>

<p>Here&rsquo;s an example of a pull request webhook failing SSL validation in GitHub:</p>

<p><img src="/images/2014-12-03-A.png" alt="Screenshot of a failed certificate validation in a GitHub WebHook configuratioon screen" /></p>

<p>GitHub will send a &ldquo;hello, world&rdquo; webhook ping when you create a new webhook.  Note
that SSL verification failures will have an usual HTTP response code of <code>0</code>:
<img src="/images/2014-12-03-B.png" alt="Screenshot of a &quot;hello, world&quot; webhook ping from GitHub" /></p>

<p>The response tab will be empty:
<img src="/images/2014-12-03-C.png" alt="Screenshot of a &quot;hello, world&quot; webhook ping from GitHub" /></p>

<h2>Troubleshoot your SSL certificate with the Symantec SSL Toolbox</h2>

<p>Symantec offers a very helpful <a href="https://ssltools.websecurity.symantec.com/checker/">tool to check your certificate installation</a>
as part of their &ldquo;SSL Toolbox&rdquo;. The tool offers suggestions to remedy certificate
issues and links to download missing intermediate CA certificates.</p>

<p>Here&rsquo;s an example of a Symantec diagnostic failure due to a missing intermediate certificate:</p>

<p><img src="/images/2014-12-03-D.png" alt="Screenshot of a failed certificate validation in the Symantec SSL Toolbox" /></p>

<h2>Using the Symantec SSL Toolbox against servers with IP ACLs</h2>

<p>A great feature of the Symantec SSL Tool is how the tool supports non-public servers
behind a firewall.  The tool will first attempt to verify your cert from
a Symantec server.  If your server is behind a firewall that denies public access
except for whitelisted origins, the SSL toolbox has a fallback mode to run a Java applet
in your browser.  The applet will perform the SSL verification
requests from local machine rather than a Symantec server.</p>

<blockquote><p><strong>TIP:</strong> GitHub publishes their public IP range for webhooks as part of the
<a href="https://api.github.com/meta">GitHub metadata API</a> if you wish to create firewall
whitelist rules for GitHub webhook requests.</p></blockquote>

<h2>Symanetc SSL Toolbox Applet and OS X Java security</h2>

<p>Given the recent security vulnerabilities of Java applets, getting the applet to run
on OS X takes some work.  Here are the setting I need to use the applet in Safari 7.1
on OS X 10.9.5 (Mavericks) using the Oracle/Sun JRE 1.7 R71.
(I never succeeded in using the applet in Firefox or Chrome despite serious effort.)</p>

<p>I needed to enable Safari to run the SSL Toolbox applets in &ldquo;unsafe mode&rdquo; without prompting:
<img src="/images/2014-12-03-E.png" alt="Screenshot of a Safari security settings for the Symantec SSL Toolbox" /></p>

<p>I also had to temporarily downgrade the JVM 1.7 browser security level to &ldquo;Medium&rdquo; and
add an execption for <code>https://ssltools.websecurity.symanttec.com</code>:</p>

<p><img src="/images/2014-12-03-F.png" alt="Screenshot of a JVM security settings for the Symantec SSL Toolbox" /></p>

<h2>Green is good!</h2>

<p>Once you&rsquo;ve resolved your certificate issues, you should see green in both the
Symantec SSL Toolbox and the GitHub WebHook requests after enabling SSL verification.</p>

<p><img src="/images/2014-12-03-G.png" alt="Screenshot of a succesful certificate validation in the Symantec SSL Toolbox" /></p>

<p><img src="/images/2014-12-03-H.png" alt="Screenshot of a succesful certificate validation in a GitHub WebHook configuration screen" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Integrating Rackspace Auto Scale Groups with ObjectRocket Mongo databases]]></title>
    <link href="http://steve-jansen.github.io/blog/2014/12/01/integrating-rackspace-auto-scale-groups-with-objectrocket-mongo-databases/"/>
    <updated>2014-12-01T13:00:58-05:00</updated>
    <id>http://steve-jansen.github.io/blog/2014/12/01/integrating-rackspace-auto-scale-groups-with-objectrocket-mongo-databases</id>
    <content type="html"><![CDATA[<p>Thanks to some pretty awesome support from Jon Fanti and John Moore at <a href="http://objectrocket.com">ObjectRocket</a>,
I learned this week that we had missed two key optimizations for using ObjectRocket MongoDBs with Rackspace
Auto Scaling groups (ASGs).</p>

<h2>ServiceNet</h2>

<p>First, ObjectRocket support can provide medium and large customers with a server FQDN that resolves to a
<a href="http://www.rackspace.com/knowledge_center/frequently-asked-question/what-is-servicenet">ServiceNet</a> private IP.
You can use this FQDN instead of the server name shown in the connect string for your instance.  As long
as your cloud servers and ObjectRocket are in the same Rackspace data center, the ServiceNet connection string
will avoid data transfer charges and keep your packets from transiting the public Internet.</p>

<h2>Dynamic IP ACLs</h2>

<p>We struggled to manually maintain the list of authorized IPs for our ObjectRocket MongoDB instances
when a ASG would add a new node.  We had a backlog plan to script the IP ACLs using Chef, but, hadn&rsquo;t
found the time yet.</p>

<p>Fortunately, ObjectRocket already supports this!  See <a href="https://app.objectrocket.com/external/rackspace">https://app.objectrocket.com/external/rackspace</a></p>

<p><img src="/images/2014-12-01.png" alt="Screenshot of ObjectRocket integration with Rackspace" /></p>

<p>According to John, the ObjectRocket integration with your Rackspace Cloud account will automatically sync
the IP ACLs with your list of current Cloud VMs.  Moreover, the integration will ignore any manual IP ACLs
you create (as long as your description doesn&rsquo;t use the <code>rax-</code> prefix).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to use Jenkins to monitor cron jobs]]></title>
    <link href="http://steve-jansen.github.io/blog/2014/11/20/how-to-use-jenkins-to-monitor-cron-jobs/"/>
    <updated>2014-11-20T17:46:46-05:00</updated>
    <id>http://steve-jansen.github.io/blog/2014/11/20/how-to-use-jenkins-to-monitor-cron-jobs</id>
    <content type="html"><![CDATA[<p>Cron jobs have a funny way of being ignored.  Either no one knows the job is failing because the job
doesn&rsquo;t tell anyone.   Or, the job is spamming your e-mail inbox many times a day, regardless of success
or failure, which means you just ignore the e-mails.</p>

<p>I&rsquo;ve seen the &ldquo;Monitor an external job&rdquo; option for new Jenkins jobs before, and never paid much attention.
Turns out it&rsquo;s a great bucket for storing logs and results of cron jobs.</p>

<p>The <a href="https://wiki.jenkins-ci.org/display/JENKINS/Monitoring+external+jobs">external-monitor-job</a> plugin
seems to ship with the Jenkins war file.  So, your Jenkins should have it out of the box.</p>

<p>Creating a job is pretty simple.  It&rsquo;s just a name and description.  Click &ldquo;New Item&rdquo; in Jenkins and
select the &ldquo;Monitor an external job&rdquo; option.  This creates a job of type <code>hudson.model.ExternalJob</code>.</p>

<p>The <a href="https://wiki.jenkins-ci.org/display/JENKINS/Monitoring+external+jobs">wiki</a> describes a
fairly complicated method to download the Jenkins jar files onto the server running
your cron jobs, and then use the Java runtime to run a jar with your cron script as an
argument.  The jar presumably forks your a new shell to run your desired cron command and
sends the output/result to Jenkins.</p>

<p>There&rsquo;s a much easier way to do this.  Redirect or <code>tee</code> your job&rsquo;s stdout/stderr output to a
temp file.  Then post the result code and log file via <code>curl</code> to Jenkins.  No need to
download jar files.  No need to even have Java runtime on the server.</p>

<p>Just POST a small XML document with the log contents (binary encoded) and the
exit code to Jenkins @ <code>/job/:jobName/postBuildResult</code> where <code>:jobName</code> is the
URL encoded name of your monitoring job in Jenkins.</p>

<p>``` bash [example cron script]</p>

<h1>!/bin/sh</h1>

<h1>example cron script to post logs to Jenkins</h1>

<h1>exit on error</h1>

<p>set -e</p>

<p>log=<code>mktemp -t tmp</code>
timer=<code>date +"%s"</code>
jenkins_job=my_monitoring_job
jenkins_server=<a href="http://jenkins.example.com:8080/jenkins/job/$jenkins_job/postBuildResult">http://jenkins.example.com:8080/jenkins/job/$jenkins_job/postBuildResult</a></p>

<h1>see <a href="http://jenkins.example.com:8080/me/configure">http://jenkins.example.com:8080/me/configure</a> to get your username and API token</h1>

<p>jenkins_username=myusername
jenkins_token=abcdef0123456789fedcba9876543210</p>

<p>function banner() {
  echo $(printf &lsquo;#%.0s&rsquo; {1..80}) >> &ldquo;$log&rdquo;
}</p>

<p>function report() {
  result=$?
  timer=$((<code>date +"%s"</code> &ndash; $timer))</p>

<p>  banner
  echo &ldquo;<code>whoami</code>@<code>hostname -f</code> <code>date</code>: elapsed $timer second(s)&rdquo; >> &ldquo;$log&rdquo;
  echo &ldquo;exit code $result&rdquo; >> &ldquo;$log&rdquo;</p>

<p>  # binary encode the log file for Jenkins
  msg=<code>cat "$log" | hexdump -v -e '1/1 "%02x"'</code></p>

<p>  # post the log to jenkins
  echo curl -X POST \</p>

<pre><code>   -u "$jenkins_username:$jenkins_token" \
   -d "&lt;run&gt;&lt;log encoding=\"hexBinary\"&gt;$msg&lt;/log&gt;&lt;result&gt;$result&lt;/result&gt;&lt;duration&gt;$timer&lt;/duration&gt;&lt;/run&gt;" \
    $jenkins_server/job/$jenkins_job/postBuildResult
</code></pre>

<p>}</p>

<p>trap report EXIT;</p>

<p>banner
echo &ldquo;hello, world @ <code>date</code>!&rdquo; | tee &ldquo;$log&rdquo;
```</p>

<p><code>bash [sample `crontab -e` entry]
MAILTO=""
0 * * * * /bin/sh /your/directory/myjob.sh
</code></p>

<p>A sample of the build log on Jenkins with a green/red build status:</p>

<p><img src="images/2014-11-20.png" alt="Sample Jenkins Build Log" /></p>

<p>Credit to <a href="http://stackoverflow.com/a/25611940/1995977">Taytay on Stackoverflow.com</a>
for figuring out how to use <code>hexdump</code> to properly encode the XML for Jenkins.</p>
]]></content>
  </entry>
  
</feed>
