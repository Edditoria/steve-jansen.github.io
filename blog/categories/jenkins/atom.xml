<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: jenkins | /* steve jansen */]]></title>
  <link href="http://steve-jansen.github.io/blog/categories/jenkins/atom.xml" rel="self"/>
  <link href="http://steve-jansen.github.io/"/>
  <updated>2014-12-15T14:28:06-05:00</updated>
  <id>http://steve-jansen.github.io/</id>
  <author>
    <name><![CDATA[Steve Jansen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Jenkins Job to export Rackspace Cloud DNS Domain As BIND Zone Files]]></title>
    <link href="http://steve-jansen.github.io/blog/2014/12/15/jenkins-job-to-export-rackspace-cloud-dns-domain-as-bind-zone-files/"/>
    <updated>2014-12-15T09:39:33-05:00</updated>
    <id>http://steve-jansen.github.io/blog/2014/12/15/jenkins-job-to-export-rackspace-cloud-dns-domain-as-bind-zone-files</id>
    <content type="html"><![CDATA[<p>Rackspace Cloud DNS offeres a great web console, along with a solid API for managing
DNS records dynamically from CM tools like Chef.</p>

<p>The web UI @ <a href="https://mycloud.rackspace.com">https://mycloud.rackspace.com</a> doesn&rsquo;t (yet) suppport an action to
export your domain(s) to standard BIND format zone files.</p>

<p>However, the API does support zone file exports,
<a href="http://docs.rackspace.com/cdns/api/v1.0/cdns-devguide/content/GET_exportDomain_v1.0__account__domains__domainId__export_domains.html"><code>GET /v1.0/{account}/domains/{domainId}/export</code></a>.</p>

<p>I wanted to create a scheduled Jenkins job to export a domain managed by
Cloud DNS to GitHub for both versioning and disaster recovery.</p>

<p>One gotcha with the API is it&rsquo;s asynchronous &ndash; you request an export, then
periodically poll on the status of the export.  The API also has rate limiting.
So, the export is a bit more involved than a simple <code>curl</code> call.</p>

<p>Based on <a href="https://community.rackspace.com/products/f/25/t/1743">this Rackspace community support post</a>,
I found a great python utility, <a href="https://github.com/wichert/clouddns">clouddns.py by Wichert Akkerman</a>.</p>

<blockquote><p>Note: I couldn&rsquo;t use the <a href="https://github.com/rackspace/pyrax">https://github.com/rackspace/pyrax</a> official SDK,
as I&rsquo;m on CentOS 6.5 with Python 2.6, and the SDK requires Python 2.7.  I also tried
the <a href="https://gist.github.com/DavidWittman/4727690">gist by DavidWittman</a> but failed
to get it working with the LON region despte following
<a href="https://github.com/rackerlabs/python-clouddns/blob/master/README.rst">the clouddns README</a></p></blockquote>

<p>Here&rsquo;s the basis of the script I used in a Jenkins job to export a domain and subdomains
every 15 minutes, alongw with the Git publisher for Jenkins to push the changes back to
a GitHub repo.</p>

<p><div><script src='https://gist.github.com/14dddef6fa0318761e3c.js'></script>
<noscript><pre><code>#!/bin/bash
# exports DNS records from Rackspace Cloud DNS to text files
# Depends on https://github.com/wichert/clouddns/blob/master/src/clouddns.py

set -e

me=export-zone
base_domain=
rackspace_region=
rackspace_rate_limit_delay=3
script_root=$(cd `dirname &quot;${BASH_SOURCE[0]}&quot;` &amp;&amp; pwd)

function usage() {
  cat &lt;&lt; EOF
Usage: `basename &quot;${BASH_SOURCE[0]}&quot;` [domain]
  exports a Racksapce Cloud DNS domain and subdomains to zone files&quot;

  domain - an optional filter for the domain to export, defaults to all
EOF
  exit 1
}

[ &quot;$1&quot; == &quot;-?&quot; ] &amp;&amp; usage
[ &quot;$1&quot; == &quot;--help&quot; ] &amp;&amp; usage

echo &quot;[$me] verifying Rackspace API credentials ...&quot;
if [ -z &quot;$OS_USERNAME&quot; ] || [ -z &quot;$OS_PASSWORD&quot; ]; then
  echo &quot;[$me] error - missing rackspace credentials - you may need a openrc file&quot; &gt;&amp;2
  echo &quot;[$me] see http://docs.rackspace.com/servers/api/v2/cs-gettingstarted/content/section_gs_install_nova.html#d6e1129&quot; &gt;&amp;2
  exit 1
fi

if echo &quot;$OS_REGION_NAME&quot; | grep -i &quot;LON&quot; &gt;/dev/null 2&gt;&amp;1; then
  rackspace_region=uk
else
  rackspace_region=us
fi

echo &quot;[$me] verifying python dependencies ...&quot;
if ! python --version &gt;/dev/null 2&gt;&amp;1; then
  echo &quot;[$me] error - python runtime not found&quot; &gt;&amp;2
  echo &quot;[$me] see https://www.python.org/downloads/&quot; &gt;&amp;2
  exit 2
fi

if ! pip --version &gt;/dev/null 2&gt;&amp;1; then
  echo &quot;[$me] error - missing python dependency - pip&quot; &gt;&amp;2
  echo &quot;[$me] see https://pip.pypa.io/en/latest/installing.html&quot; &gt;&amp;2
  exit 2
fi

if ! pip install --user isodate &gt;/dev/null; then
  echo &quot;[$me] error - pip install isodate failed&quot; &gt;&amp;2
  exit 3
fi

if ! pip install --user requests &gt;/dev/null; then
  echo &quot;[$me] error - pip install requets failed&quot; &gt;&amp;2
  exit 3
fi

echo &quot;[$me] downloading wichert/clouddns from GitHub ...&quot;
curl -L -o &quot;$script_root/clouddns.py&quot; &#39;https://raw.githubusercontent.com/wichert/clouddns/master/src/clouddns.py&#39;

if [ -z &quot;$1&quot; ]; then
  base_domain=&quot;.&quot;
else
 base_domain=&quot;$1&quot;
fi

clouddns_command=&quot;python &quot;&quot;$script_root/clouddns.py&quot;&quot; --region &quot;&quot;$rackspace_region&quot;&quot; \
                                                      --username &quot;&quot;$OS_USERNAME&quot;&quot; \
                                                      --api &quot;&quot;$OS_PASSWORD&quot;&quot;&quot;

echo &quot;[$me] exporting zone files for $base_domain ...&quot;
domain_list=`$clouddns_command list | \
             awk &#39;{print $1}&#39; | \
             grep &quot;$base_domain&quot; | \
             sort`

for domain in $domain_list;
do
  echo &quot;[$me] exporting $domain ...&quot;
  # ignore errors in exporting a subdomain, which can happen due to rate limiting
  # assume the next run will export the subdomain
  set +e
  $clouddns_command export-zone &quot;$domain&quot; &gt; &quot;$domain.txt&quot;
  set -e

  # avoid Rackspace API rate limiting errors
  echo &quot;[$me] sleeping $rackspace_rate_limit_delay seconds ...&quot;
  sleep $rackspace_rate_limit_delay
done

exit 0
</code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Troubleshooting GitHub WebHooks SSL Verification]]></title>
    <link href="http://steve-jansen.github.io/blog/2014/12/03/troubleshooting-github-webhooks-ssl-verification/"/>
    <updated>2014-12-03T10:28:37-05:00</updated>
    <id>http://steve-jansen.github.io/blog/2014/12/03/troubleshooting-github-webhooks-ssl-verification</id>
    <content type="html"><![CDATA[<p>GitHub WebHooks and Jenkins go together like peanut butter and jelly.
<a href="http://kohsuke.org/2011/12/01/polling-must-die-triggering-jenkins-builds-from-a-git-hook/">SCM Webhook trggers are way more efficient for Jenkins over SCM polling</a>.  Webhooks also give you a great UX &ndash; Jenkins reacts
immediately when you push a commit or open a pull request.</p>

<p>I am a huge fan of using <a href="https://github.com/jenkinsci/github-oauth-plugin">GitHub OAuth for single sign on with Jenkins</a>.
The security of OAuth really depends on TLS/SSL for protecting the token in transit,
so your Jenkins should use SSL when using GitHub OAuth.</p>

<p>GitHub&rsquo;s Webhooks have the option to perform SSL certificate validation.  I&rsquo;ve
run into issues with GitHub&rsquo;s &ldquo;Hookshot&rdquo; HTTP engine failing SSL verification for
otherwise valid certificates.  Most of my problems were related to installing
intermediate CA certificates on Jenkins.</p>

<h2>GitHub WebHook configuration and SSL certificate verification</h2>

<p>Here&rsquo;s an example of a pull request webhook failing SSL validation in GitHub:</p>

<p><img src="/images/2014-12-03-A.png" alt="Screenshot of a failed certificate validation in a GitHub WebHook configuratioon screen" /></p>

<p>GitHub will send a &ldquo;hello, world&rdquo; webhook ping when you create a new webhook.  Note
that SSL verification failures will have an usual HTTP response code of <code>0</code>:
<img src="/images/2014-12-03-B.png" alt="Screenshot of a &quot;hello, world&quot; webhook ping from GitHub" /></p>

<p>The response tab will be empty:
<img src="/images/2014-12-03-C.png" alt="Screenshot of a &quot;hello, world&quot; webhook ping from GitHub" /></p>

<h2>Troubleshoot your SSL certificate with the Symantec SSL Toolbox</h2>

<p>Symantec offers a very helpful <a href="https://ssltools.websecurity.symantec.com/checker/">tool to check your certificate installation</a>
as part of their &ldquo;SSL Toolbox&rdquo;. The tool offers suggestions to remedy certificate
issues and links to download missing intermediate CA certificates.</p>

<p>Here&rsquo;s an example of a Symantec diagnostic failure due to a missing intermediate certificate:</p>

<p><img src="/images/2014-12-03-D.png" alt="Screenshot of a failed certificate validation in the Symantec SSL Toolbox" /></p>

<h2>Using the Symantec SSL Toolbox against servers with IP ACLs</h2>

<p>A great feature of the Symantec SSL Tool is how the tool supports non-public servers
behind a firewall.  The tool will first attempt to verify your cert from
a Symantec server.  If your server is behind a firewall that denies public access
except for whitelisted origins, the SSL toolbox has a fallback mode to run a Java applet
in your browser.  The applet will perform the SSL verification
requests from local machine rather than a Symantec server.</p>

<blockquote><p><strong>TIP:</strong> GitHub publishes their public IP range for webhooks as part of the
<a href="https://api.github.com/meta">GitHub metadata API</a> if you wish to create firewall
whitelist rules for GitHub webhook requests.</p></blockquote>

<h2>Symanetc SSL Toolbox Applet and OS X Java security</h2>

<p>Given the recent security vulnerabilities of Java applets, getting the applet to run
on OS X takes some work.  Here are the setting I need to use the applet in Safari 7.1
on OS X 10.9.5 (Mavericks) using the Oracle/Sun JRE 1.7 R71.
(I never succeeded in using the applet in Firefox or Chrome despite serious effort.)</p>

<p>I needed to enable Safari to run the SSL Toolbox applets in &ldquo;unsafe mode&rdquo; without prompting:
<img src="/images/2014-12-03-E.png" alt="Screenshot of a Safari security settings for the Symantec SSL Toolbox" /></p>

<p>I also had to temporarily downgrade the JVM 1.7 browser security level to &ldquo;Medium&rdquo; and
add an execption for <code>https://ssltools.websecurity.symanttec.com</code>:</p>

<p><img src="/images/2014-12-03-F.png" alt="Screenshot of a JVM security settings for the Symantec SSL Toolbox" /></p>

<h2>Green is good!</h2>

<p>Once you&rsquo;ve resolved your certificate issues, you should see green in both the
Symantec SSL Toolbox and the GitHub WebHook requests after enabling SSL verification.</p>

<p><img src="/images/2014-12-03-G.png" alt="Screenshot of a succesful certificate validation in the Symantec SSL Toolbox" /></p>

<p><img src="/images/2014-12-03-H.png" alt="Screenshot of a succesful certificate validation in a GitHub WebHook configuration screen" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to use Jenkins to monitor cron jobs]]></title>
    <link href="http://steve-jansen.github.io/blog/2014/11/20/how-to-use-jenkins-to-monitor-cron-jobs/"/>
    <updated>2014-11-20T17:46:46-05:00</updated>
    <id>http://steve-jansen.github.io/blog/2014/11/20/how-to-use-jenkins-to-monitor-cron-jobs</id>
    <content type="html"><![CDATA[<p>Cron jobs have a funny way of being ignored.  Either no one knows the job is failing because the job
doesn&rsquo;t tell anyone.   Or, the job is spamming your e-mail inbox many times a day, regardless of success
or failure, which means you just ignore the e-mails.</p>

<p>I&rsquo;ve seen the &ldquo;Monitor an external job&rdquo; option for new Jenkins jobs before, and never paid much attention.
Turns out it&rsquo;s a great bucket for storing logs and results of cron jobs.</p>

<p>The <a href="https://wiki.jenkins-ci.org/display/JENKINS/Monitoring+external+jobs">external-monitor-job</a> plugin
seems to ship with the Jenkins war file.  So, your Jenkins should have it out of the box.</p>

<p>Creating a job is pretty simple.  It&rsquo;s just a name and description.  Click &ldquo;New Item&rdquo; in Jenkins and
select the &ldquo;Monitor an external job&rdquo; option.  This creates a job of type <code>hudson.model.ExternalJob</code>.</p>

<p>The <a href="https://wiki.jenkins-ci.org/display/JENKINS/Monitoring+external+jobs">wiki</a> describes a
fairly complicated method to download the Jenkins jar files onto the server running
your cron jobs, and then use the Java runtime to run a jar with your cron script as an
argument.  The jar presumably forks your a new shell to run your desired cron command and
sends the output/result to Jenkins.</p>

<p>There&rsquo;s a much easier way to do this.  Redirect or <code>tee</code> your job&rsquo;s stdout/stderr output to a
temp file.  Then post the result code and log file via <code>curl</code> to Jenkins.  No need to
download jar files.  No need to even have Java runtime on the server.</p>

<p>Just POST a small XML document with the log contents (binary encoded) and the
exit code to Jenkins @ <code>/job/:jobName/postBuildResult</code> where <code>:jobName</code> is the
URL encoded name of your monitoring job in Jenkins.</p>

<p>``` bash [example cron script]</p>

<h1>!/bin/sh</h1>

<h1>example cron script to post logs to Jenkins</h1>

<h1>exit on error</h1>

<p>set -e</p>

<p>log=<code>mktemp -t tmp</code>
timer=<code>date +"%s"</code>
jenkins_job=my_monitoring_job
jenkins_server=<a href="http://jenkins.example.com:8080/jenkins/job/$jenkins_job/postBuildResult">http://jenkins.example.com:8080/jenkins/job/$jenkins_job/postBuildResult</a></p>

<h1>see <a href="http://jenkins.example.com:8080/me/configure">http://jenkins.example.com:8080/me/configure</a> to get your username and API token</h1>

<p>jenkins_username=myusername
jenkins_token=abcdef0123456789fedcba9876543210</p>

<p>function banner() {
  echo $(printf &lsquo;#%.0s&rsquo; {1..80}) >> &ldquo;$log&rdquo;
}</p>

<p>function report() {
  result=$?
  timer=$((<code>date +"%s"</code> &ndash; $timer))</p>

<p>  banner
  echo &ldquo;<code>whoami</code>@<code>hostname -f</code> <code>date</code>: elapsed $timer second(s)&rdquo; >> &ldquo;$log&rdquo;
  echo &ldquo;exit code $result&rdquo; >> &ldquo;$log&rdquo;</p>

<p>  # binary encode the log file for Jenkins
  msg=<code>cat "$log" | hexdump -v -e '1/1 "%02x"'</code></p>

<p>  # post the log to jenkins
  echo curl -X POST \</p>

<pre><code>   -u "$jenkins_username:$jenkins_token" \
   -d "&lt;run&gt;&lt;log encoding=\"hexBinary\"&gt;$msg&lt;/log&gt;&lt;result&gt;$result&lt;/result&gt;&lt;duration&gt;$timer&lt;/duration&gt;&lt;/run&gt;" \
    $jenkins_server/job/$jenkins_job/postBuildResult
</code></pre>

<p>}</p>

<p>trap report EXIT;</p>

<p>banner
echo &ldquo;hello, world @ <code>date</code>!&rdquo; | tee &ldquo;$log&rdquo;
```</p>

<p><code>bash [sample `crontab -e` entry]
MAILTO=""
0 * * * * /bin/sh /your/directory/myjob.sh
</code></p>

<p>A sample of the build log on Jenkins with a green/red build status:</p>

<p><img src="images/2014-11-20.png" alt="Sample Jenkins Build Log" /></p>

<p>Credit to <a href="http://stackoverflow.com/a/25611940/1995977">Taytay on Stackoverflow.com</a>
for figuring out how to use <code>hexdump</code> to properly encode the XML for Jenkins.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Binding Jenkins to port 80 on SUSE Linux]]></title>
    <link href="http://steve-jansen.github.io/blog/2014/03/05/binding-jenkins-to-port-80-on-suse/"/>
    <updated>2014-03-05T18:09:00-05:00</updated>
    <id>http://steve-jansen.github.io/blog/2014/03/05/binding-jenkins-to-port-80-on-suse</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been helping an awesome colleague on DevOps for our Jenkins farm, which we use
for continuous integration and continuous deployment to our preproduction environments.</p>

<p>We are really trying to do it right:</p>

<ul>
<li>Use Puppet to provision the Jenkins master, Linux VM build slaves, Windows VM slaves,
and even OS X bare metal slaves (for iOS builds)</li>
<li>Automated backups of Jenkins config files to a private GitHub repo for disster recovery</li>
<li>Patches the GitHub OAuth plugin to make sure you have the same collaborator permissions
(read/write/admin) in a Jenkins job as you do the GitHub repo.</li>
<li>Have a Jenkins staging environment to test upgrades to Jenkins and plugins to avoid surprises.</li>
<li>Run Jenkins on the Long Term Support (LTS) release channel to avoid surprises.</li>
</ul>


<p>I wish my shop used CentOS or Debian; sadly we are stuck on SUSE Enterprise.  SUSE is really
good at turning 5 minute tasks on CentOS or Debian into uber frustrating hour-long ordeals.</p>

<p>One of the glitches we faced was running the Jenkins web UI on port 80.  SUSE lacks the
authbind package for binding to port below port 1024 as a non-root user.  We wanted to run the
Jenkins deamon as a regular privilege user, so running as root was not an option.</p>

<p>We are currently smoke testing this LSB <code>/etc/init.d/jenkins.portforwarding</code> script, which is
just a wrapper around <code>iptables</code>.  So far, it seems to get the job done.</p>

<p><div><script src='https://gist.github.com/9361161.js'></script>
<noscript><pre><code>#!/bin/sh
#
#     SUSE system statup script for port forwarding port 80 to the port
#     for the Jenkins continuous build server.
#
#     Jenkins normally does not run as root, thus /etc/init.d/jenkins cannot
#     bind to ports &lt; 1024 since SUSE does not support authbind (or similar).
#
#     The MIT License (MIT)
#
#     Copyright (C) 2014 Steve Jansen
#
#     Permission is hereby granted, free of charge, to any person obtaining a copy
#     of this software and associated documentation files (the &quot;Software&quot;), to deal
#     in the Software without restriction, including without limitation the rights
#     to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#     copies of the Software, and to permit persons to whom the Software is
#     furnished to do so, subject to the following conditions:
#
#     The above copyright notice and this permission notice shall be included in
#     all copies or substantial portions of the Software.
#
#     THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#     IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#     AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#     LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#     OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
#     THE SOFTWARE.
#
### BEGIN INIT INFO
# Provides:          jenkins.portforwarding
# Required-Start:    jenkins
# Should-Start:
# Required-Stop:     jenkins
# Should-Stop:
# Default-Start:     3 5
# Default-Stop:      0 1 2 6
# Short-Description: Port forwarding for Jenkins continuous build server
# Description:       Forward port 80 traffic to the Jenkins continuous build server
### END INIT INFO

# Check for existence of needed config file and read it
JENKINS_CONFIG=/etc/sysconfig/jenkins
JENKINS_FORWARD_PORT=80

test -r &quot;$JENKINS_CONFIG&quot; || { echo &quot;$JENKINS_CONFIG not existing&quot;;
  if [ &quot;$1&quot; = &quot;stop&quot; ]; then exit 0;
  else exit 6; fi; }

# Read config
. &quot;$JENKINS_CONFIG&quot;

. /etc/rc.status
rc_reset # Reset status of this service

if [ &quot;$JENKINS_PORT&quot; -eq &quot;$JENKINS_FORWARD_PORT&quot; ]
then
  echo &quot;Jenkins already running on port $JENKINS_FORWARD_PORT, skipping port forwarding&quot;
  rc_exit
fi

readonly iptables_table=&quot;-t nat&quot;
readonly base_rule=&quot;-p tcp --dport $JENKINS_FORWARD_PORT -j REDIRECT --to-ports $JENKINS_PORT&quot;
readonly external_rule=&quot;PREROUTING -p tcp -m tcp --dport $JENKINS_FORWARD_PORT -j REDIRECT --to-ports $JENKINS_PORT&quot;
readonly loopback_rule=&quot;OUTPUT -p tcp -m tcp --dport $JENKINS_FORWARD_PORT -j REDIRECT --to-ports $JENKINS_PORT&quot;

check_status ()
{
  iptables-save $iptables_table | grep -- &quot;$external_rule&quot; &gt; /dev/null 2&gt;&amp;1 &amp;&amp; iptables-save $iptables_table | grep -- &quot;$loopback_rule&quot; &gt; /dev/null 2&gt;&amp;1
  return $?
}

case &quot;$1&quot; in
  start)
      check_status
      if [ $? -eq 0 ]
      then
        echo &quot;Jenkins port forwarding already forwarding port $JENKINS_FORWARD_PORT to port $JENKINS_PORT&quot;
        rc_exit
      fi

      echo &quot;Starting Jenkins port forwarding&quot;
      echo &quot;Enabling iptables port forwarding from port $JENKINS_FORWARD_PORT to port $JENKINS_PORT&quot;
      iptables $iptables_table -A $external_interface $external_rule &amp;&amp; iptables $iptables_table -A $loopback_rule
      result=$?

      if [ $result -eq 0 ]
      then
        rc_status -v
      else
        rc_failed $result
        rc_status -v
      fi
    ;;
  stop)
      check_status
      if [ $? -ne 0 ]
      then
        echo &quot;Jenkins port forwarding already stopped&quot;
        rc_exit
      fi

      echo &quot;Disabling iptables port forwarding from port $JENKINS_FORWARD_PORT to port $JENKINS_PORT&quot;
      iptables $iptables_table -D $external_interface $external_rule &amp;&amp; iptables $iptables_table -D $loopback_rule
      result=$?

      if [ $result -eq 0 ]
      then
        rc_status -v
      else
        rc_failed $result
        rc_status -v
      fi
    ;;
  restart)
      $0 stop
      $0 start
      rc_status
    ;;
    status)
      echo &quot;Checking status of iptables port forwarding from port $JENKINS_FORWARD_PORT to port $JENKINS_PORT&quot;
      check_status
      result=$?

      if [ $result -eq 0 ]
      then
        echo &quot;Port forwarding from port $JENKINS_FORWARD_PORT to port $JENKINS_PORT is enabled&quot;
        rc_status -v
      else
        echo &quot;Port forwarding from port $JENKINS_FORWARD_PORT to port $JENKINS_PORT is disabled&quot;
        rc_failed $result
        rc_status -v
      fi
    ;;
  *)
      echo &quot;Usage: $0 {start|stop|status}&quot;
      exit 1
    ;;
esac
rc_exit
</code></pre></noscript></div>
</p>

<p>If all goes well, I will merge this logic into a pull request for the <a href="https://github.com/jenkinsci/jenkins/blob/master/opensuse/SOURCES/jenkins.init.in">Jenkins init.d script for OpenSuse</a>.</p>
]]></content>
  </entry>
  
</feed>
