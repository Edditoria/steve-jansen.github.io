<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[/* steve jansen */]]></title>
  <link href="http://steve-jansen.github.com/atom.xml" rel="self"/>
  <link href="http://steve-jansen.github.com/"/>
  <updated>2013-08-21T16:16:55-04:00</updated>
  <id>http://steve-jansen.github.com/</id>
  <author>
    <name><![CDATA[Steve Jansen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A Fantastic Video Tutorial on Sublime Text 2]]></title>
    <link href="http://steve-jansen.github.com/blog/2013/08/21/a-fantastic-sublime-text-2-video-tutorial/"/>
    <updated>2013-08-21T12:29:00-04:00</updated>
    <id>http://steve-jansen.github.com/blog/2013/08/21/a-fantastic-sublime-text-2-video-tutorial</id>
    <content type="html"><![CDATA[<p>Jeffrey Way at Nettuts+ created a wonderul video tutorial on using Sublime Text 2
to its fullest capabilities.</p>

<div class="embed-video-container"><iframe src="http://www.youtube.com/embed/TZ-bgcJ6fQo "></iframe></div>


<p>Even better, Jeffrey authored a free online course to <a href="https://tutsplus.com/course/improve-workflow-in-sublime-text-2/">improve your workflow in Sublime Text 2</a>.
You can read more about it at <a href="http://net.tutsplus.com/articles/news/perfect-workflow-in-sublime-text-free-course/">Perfect Workflow in Sublime Text: Free Course!</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[For all UI devs out there...json-proxy v0.10.0]]></title>
    <link href="http://steve-jansen.github.com/blog/2013/08/20/for-all-ui-devs-out-there-json-proxy-v0-dot-10-dot-0/"/>
    <updated>2013-08-20T21:44:00-04:00</updated>
    <id>http://steve-jansen.github.com/blog/2013/08/20/for-all-ui-devs-out-there-json-proxy-v0-dot-10-dot-0</id>
    <content type="html"><![CDATA[<p>To all my UI devs out there, I finally had some time to rework json-proxy into a lean and meaner machine.</p>

<p>If you haven&#8217;t seen the proxy before, it enables a UI dev to proxy localhost URLs to a remote server.</p>

<p>Why do this?   Say you are doing an AngularJS front end, and want to wire some data to a REST API call like <code>$http.get('/api/foo/1')</code>.
Before, you had to mock out the JSON result, run the entire server stack locally, or just cross your fingers and hope it works on the integration server.</p>

<p>Well, the proxy lets you transparently reroute <code>http://localhost/api/foo/1</code> from your local laptop to an integration server
like <code>http://integration-server/api/foo/1</code>.  No CORS.  No JSONP.  No nonsense.</p>

<h3>Grunt</h3>

<p>With v0.1.0, the big change is the proxy now works right inside the Grunt server.   Here&#8217;s an example config from the scaffold project:</p>

<pre><code>connect: {
  options: {
    port: 9000,
    // Change this to '0.0.0.0' to access the server from outside.
    hostname: 'localhost'
  },
  livereload: {
    options: {
      middleware: function (connect) {
        return [
          require('json-proxy').initialize({
            proxy: {
              forward: {
                '/api/': 'http://integration-server:4040',
                '/swagger/': 'http://integration-server:4040',
              },
              headers: {
                'X-Forwarded-User': 'John Doe',
                'X-Forwarded-User-Email': 'john.doe@example.com'
              }
            }
          }),
          lrSnippet,
          mountFolder(connect, '.tmp'),
          mountFolder(connect, yeomanConfig.app)
        ];
      }
    }
  },
</code></pre>

<h3>Auth Headers</h3>

<p>Even better, you can inject headers into proxied request.  So if you remote server requires an Authorization header with an OAuth-style token, or sits behind an Enterprise SSO appliance, you can add the headers to deal with bypassing the remote server authentication.</p>

<h3>CLI</h3>

<p>The CLI utility is also improved.  The CLI properly supports global installation.
If you install using <code>sudo npm install -g json-proxy</code>, you can invoke the proxy simply as <code>json-proxy</code> with whatever args you want.</p>

<h3>CLI usage info:</h3>

<pre><code> json-proxy [-c configFile] [-p port] [-f proxy forwarding rule]
             [-h header rule] [-html5mode [defaultFile]] [directory]

Examples:
   json-proxy -p 8080 -f "/api=http://server" -f "/=http://localhost:9000" .
   json-proxy -h "X-Forwarded-User=johndoe" /tmp/folder
   json-proxy -c "/tmp/config.json"

By default, looks for a config file at ./json-proxy.json

Environmental variables:
  JSON_PROXY_PORT         see --port
  JSON_PROXY_WEBROOT      directory
  JSON_PROXY_GATEWAY      --gateway
  JSON_PROXY_GATEWAY_AUTH "username:password" credentials for --gateway)

Options:
  -p, --port     The TCP port for the proxy server                      
  -f, --forward  a forwarding rule (ex. /foo=server/foo)                
  -h, --header   a custom request header (ex. iv-user=johndoel)         
  -c, --config   a config file                                          
  -g, --gateway  URL for a LAN HTTP proxy to use for forwarding requests
  --html5mode    support AngularJS HTML5 mode by catching 404s          
  -?, --help     about this utility                                     
  --version      version info            
</code></pre>

<p>More info @ <a href="https://github.com/steve-jansen/json-proxy">https://github.com/steve-jansen/json-proxy</a> and
<a href="https://npmjs.org/package/json-proxy">https://npmjs.org/package/json-proxy</a></p>

<p>Enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[passport-reverseproxy]]></title>
    <link href="http://steve-jansen.github.com/blog/2013/08/11/passport-reverseproxy/"/>
    <updated>2013-08-11T19:38:00-04:00</updated>
    <id>http://steve-jansen.github.com/blog/2013/08/11/passport-reverseproxy</id>
    <content type="html"><![CDATA[<p>Just released a new &#8220;API&#8221; provider for the NodeJS authentication middelware <a href="http://passportjs.org">Passport</a>.  The <a href="https://npmjs.org/package/passport-reverseproxy">ReverseProxy</a> API provider enables NodeJS apps to authenticate users via HTTP Request Proxies injected by a reverse HTTP proxy server.  Reverse Proxy authentication is a technique seen in enterprise Single Sign On (SSO) where an authentication server sits in front of the web server/app server.  The proxy server authenticates users against some enterprise store (e.g., LDAP Directory).</p>

<p>After successful authentication, the proxy will forward the original request to the target web server/app server.
Typically, the proxy will inject identifying information about the user (e.g., username, email address, display name) into custom HTTP request headers.  IBM&#8217;s WebSeal application for SSO does exactly this.</p>

<p>Suprisingly, no one had written a passport strategy that uses custom HTTP headers yet.  So, I coded up an implementation,
inspired by Passport&#8217;s <code>passport-http</code> strategy for HTTP basic authentication.</p>

<p>Installing the provider is as simple as:</p>

<pre><code>npm install express
npm install passport
npm install passport-reverseproxy
</code></pre>

<p>I&#8217;ve also included a sample Express app using the reverse proxy stategy in <a href="https://github.com/steve-jansen/passport-reverseproxy/tree/master/examples">passport-reverseproxy/examples/app.js</a></p>

<p>Overall, I think Passport is a great library - both easy to use and easy to implement custom strategies.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Update to the Cordova Email Plugin for iOS]]></title>
    <link href="http://steve-jansen.github.com/blog/2013/08/06/cordova-email-plugin-for-ios-update/"/>
    <updated>2013-08-06T23:45:00-04:00</updated>
    <id>http://steve-jansen.github.com/blog/2013/08/06/cordova-email-plugin-for-ios-update</id>
    <content type="html"><![CDATA[<p>I put some serious TLC against the Cordova/PhoneGap plugin for creating email messages on iOS devices &#8211;
v2.0 of the plugin now lives @ <a href="https://github.com/steve-jansen/cordova-ios-emailcomposer">https://github.com/steve-jansen/cordova-ios-emailcomposer</a></p>

<p>You can give it a test drive with:</p>

<pre><code>sudo npm install -g cordova
cordova create ~/MyApp MyApp
cd ~/MyApp
cordova platform add ios
cordova plugin add emailcomposer # using the http://plugins.cordova.io registry
cordova build
# manually update the www/index.html file to link to www/examples/EmailComposer.html
# run the app in the iOS 5.x+ simulator via Xcode
</code></pre>

<p>Major changes to the plugin include:</p>

<ul>
<li>Support for file attachments using files paths, or file contents as encoded strings</li>
<li>Simpler JavaScript API</li>
<li>Support for cordova.require to load the plugin in JavaScript which means less global namespace pollution</li>
<li>Cordova 2.0+ plugin spec implemented (i.e., <code>- (void) show:(CDVInvokedUrlCommand*)command</code>)</li>
<li>ARC support</li>
<li>Ran git subtree to extract the history into a standalone repo,
per <a href="http://shazronatadobe.wordpress.com/2012/11/07/cordova-plugins-put-them-in-your-own-repo-2/">the new Cordova plugin respository guidelines</a></li>
<li>Backwards compatibility with the JS API for the 1.x plugin</li>
<li>Backwards compatibility with the iOS/EmailComposerWithAttachments plugin</li>
<li>Jasmine unit tests for the JS part of the plugin</li>
<li>Xcode unit tests for the obj-c part of the plugin</li>
</ul>


<p>I have a <a href="https://github.com/phonegap/phonegap-plugins/pull/1238">pull request</a> to repoint <a href="https://github.com/phonegap/phonegap-plugins/tree/master/iOS/EmailComposer">phonegap-plugins/iOS/EmailCompser</a> and
<a href="https://github.com/phonegap/phonegap-plugins/tree/master/iOS/EmailComposerWithAttachments">phonegap-plugins/iOS/EmailCompserWithAttachments</a> to this new repo.
As a courtesy, I&#8217;ve asked the original contributors to these two plugins to give their blessing.</p>

<p>I&#8217;ve also published this plugin to the <a href="http://plugins.cordova.io/#/emailcomposer">cordova npm-like repository</a>.  And, trust me, <a href="https://issues.apache.org/jira/browse/CB-4528?">don&#8217;t call <code>plugman publish</code> with the <code>--plugin</code> argument</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to modify the TCP/IP port binding for the Microsoft Web Deployment Agent Service]]></title>
    <link href="http://steve-jansen.github.com/blog/2013/02/28/how-to-modify-the-tcp-slash-ip-port-binding-for-the-microsoft-web-deployment-agent-service/"/>
    <updated>2013-02-28T16:44:00-05:00</updated>
    <id>http://steve-jansen.github.com/blog/2013/02/28/how-to-modify-the-tcp-slash-ip-port-binding-for-the-microsoft-web-deployment-agent-service</id>
    <content type="html"><![CDATA[<p>I love shell scripting, which is probably why I seem to somehow get organically involved in &#8220;DevOps&#8221; on most of my project work.  I&#8217;m drafting up a series of posts on tips and tricks for shell scripts (with love for both Windows and *nix) - it seems to be a fading art among recent comp sci grads.  Until I finish those posts, I wanted to share a quick script I wrote to reassign the TCP/IP port binding for Microsoft&#8217;s Web Deployment Agent service.</p>

<p>This is my attempt to refine a very good answer posted a couple years ago <a href="http://stackoverflow.com/questions/5867392/can-the-web-deploy-agent-run-on-a-port-other-than-80-on-iis6">asking if web deploy can run on a port other than 80</a>.  Why, yes it can&#8230;</p>

<div><script src='https://gist.github.com/5060329.js'></script>
<noscript><pre><code></code></pre></noscript></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tailoring the Windows Command Prompt Shell]]></title>
    <link href="http://steve-jansen.github.com/blog/2013/02/27/tailoring-the-windows-command-prompt-shell/"/>
    <updated>2013-02-27T14:18:00-05:00</updated>
    <id>http://steve-jansen.github.com/blog/2013/02/27/tailoring-the-windows-command-prompt-shell</id>
    <content type="html"><![CDATA[<p>I spend a lot of time in the Windows Command Prompt.  Most developers I work with don&#8217;t know some of the tricks up the Command Prompt&#8217;s sleeve.  So allow me to share some of my favorite settings.</p>

<!-- more -->


<h2>Launching the Command Prompt</h2>

<p>Windows gurus launch the command prompt using the keyboard shortcut <code>Windows Logo Key</code>+<code>R</code> (i.e., &#8220;Run&#8221;) > Type <code>cmd.exe</code> then <code>Enter</code>.  This is way faster than navigating the Windows Start Menu to find the Command Prompt.</p>

<h2>Preferences</h2>

<p>Right click the Command Prompt title bar and select &#8220;Properties&#8221; from the context menu.  I modify the preferences highlighted in below screenshots to accomplish a few things:</p>

<ul>
<li>make the shell easier on our overtaxed eyes ;)</li>
<li>quicker navigation of the command history (up/down arrows) by removing the noise of duplicate entries</li>
<li>simplify copying text to copy any selected text (by the mouse) when you press enter</li>
<li>simplify pasting text to paste on right click</li>
</ul>


<p><img src="http://steve-jansen.github.com/images/posts/2013-02-27-A.png" alt="Screenshot of the Command Prompt Options tab" /></p>

<p><img src="http://steve-jansen.github.com/images/posts/2013-02-27-B.png" alt="Screenshot of the Command Prompt Options tab" /></p>

<p><img src="http://steve-jansen.github.com/images/posts/2013-02-27-C.png" alt="Screenshot of the Command Prompt Options tab" /></p>

<p><img src="http://steve-jansen.github.com/images/posts/2013-02-27-D.png" alt="Screenshot of the Command Prompt Options tab" /></p>

<h2>Tab and Filename Autocompletion</h2>

<p>The <code>Tab</code> key should auto complete the names of files and folders in the current working directory.  Each press of <code>Tab</code> should cycle to the next name.  The autocompletion is pretty smart - it will filter the choices based on what you have already typed.   For example, typing <code>D</code> then <code>Tab</code> will autocomplete the first file or folder that starts with the letter &#8220;D&#8221;.  Tabbing again will display the next file or folder that start with D.  Tabbing will cycle through a ring of possible matches.</p>

<p>For example, tabbing through the letter &#8220;D&#8221; in your user profile directory on Windows 7 might autocomplete &#8220;Desktop&#8221;, &#8220;Documents&#8221;, &#8220;Downloads&#8221;, and then back to &#8220;Desktop&#8221;.  Autocomplete will even quote paths with spaces, which is a nice trick.  I often see experienced developers stuggle to find a filepath, repeatedly doing <code>DIR</code> and <code>CD</code> commands to just run a single batch script.</p>

<p>One small shortcoming is autocomlete cannot expand environmental variables like <code>%ProgramFiles%</code> or <code>%UserProfile%</code>.  Although you can use <code>Windows logo key</code> + <code>R</code> Run dialog to autocomplete environmental variables.</p>

<p>Autocompletion saves you a bunch of typing with just a key or two to filter your choices, tabbing until you find the folder you want,  pressing <code>\</code> to start tabbing through the subfolder, and repeat.  And it makes you look more competent when pair programming.</p>

<h2>Command History</h2>

<p>The <code>DOSKEY</code> utility is similar to the <code>history</code> utility on Unix/Linux shells.  Most developers know you can press the up arrow or down arrow to cycle through the history of issued commands.</p>

<p>Most developers (and even sysadmins) aren&#8217;t aware of the advanced keyboard shortcuts wired to <code>DOSKEY</code>:</p>

<ul>
<li>UP and DOWN ARROWS recall commands</li>
<li><code>ESC</code> clears command line</li>
<li><code>F7</code> displays command history</li>
<li><code>ALT</code>+<code>F7</code> clears command history</li>
<li><code>F8</code> searches command history</li>
<li><code>F9</code> selects a command by number</li>
</ul>


<p>Example of pressing <code>ALT</code>+<code>F7</code> to view the command history:
<img src="http://steve-jansen.github.com/images/posts/2013-02-27-E.png" alt="Screenshot of the visual command history" /></p>

<p>Example of pressing <code>F9</code> to recall a command by history number:
<img src="http://steve-jansen.github.com/images/posts/2013-02-27-F.png" alt="Screenshot of the visual command history" /></p>

<p>Example of pressing <code>F8</code> to cycle through history entries matching the text &#8220;D&#8221; already typed into the comamnd line buffer:
<img src="http://steve-jansen.github.com/images/posts/2013-02-27-G.png" alt="Screenshot of the visual command history" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A ghost no more]]></title>
    <link href="http://steve-jansen.github.com/blog/2013/02/25/a-ghost-no-more/"/>
    <updated>2013-02-25T12:49:00-05:00</updated>
    <id>http://steve-jansen.github.com/blog/2013/02/25/a-ghost-no-more</id>
    <content type="html"><![CDATA[<p>Blogging has long been on my todo list &#8211; quite frankly too long.  A colleague shared <a href="http://www.troyhunt.com/2013/02/the-ghost-who-codes-how-anonymity-is.html">a great piece by Troy Hunt named &#8220;The ghost who codes: how anonymity is killing your career&#8221;</a>.  Troy inspired me that I need to make the time to just get it done.  So this is where I start giving back whatever small knowledge bits I may have.</p>

<p>I am fortunate enough to be with a company now that encourages professional writing, which hasn&#8217;t always been the case.  Troy&#8217;s article really resonated with me that developers have an insatiatable appetite for consuming knowledge.  We take information all the time, and there&#8217;s a duty on all our parts to give back and not just take.  Thanks to both Troy any my colleague Alex for pushing me to do more!</p>

<p>Many years ago I learned an metaphor from a very accomplished veteran of the US military that is quite applicable to coding: &#8220;you have to either be tough or smart to succeed&#8221;.  Say you want to navigate from point A to point B, and there just happens to be a tall mountain between the two points.  The tough guy takes a straight line route, ardously ascending and descending the mountain.  The smart guy circumnavigates the mountain, saving time and energy.</p>

<p>I know developers like to be the smartest person in the room, but, I am self-aware enough to admit I often fall into the &#8220;tough&#8221; camp - hacking into the late hours until the job is done.  I suppose this blog will be a true measure of how many (or how few) smart/clever ideas I have up my sleeve!</p>
]]></content>
  </entry>
  
</feed>
