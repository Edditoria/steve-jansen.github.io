<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[/* steve jansen */]]></title>
  <link href="http://steve-jansen.github.com/atom.xml" rel="self"/>
  <link href="http://steve-jansen.github.com/"/>
  <updated>2013-03-03T15:24:56-05:00</updated>
  <id>http://steve-jansen.github.com/</id>
  <author>
    <name><![CDATA[Steve Jansen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to modify the TCP/IP port binding for the Microsoft Web Deployment Agent Service]]></title>
    <link href="http://steve-jansen.github.com/blog/2013/02/28/how-to-modify-the-tcp-slash-ip-port-binding-for-the-microsoft-web-deployment-agent-service/"/>
    <updated>2013-02-28T16:44:00-05:00</updated>
    <id>http://steve-jansen.github.com/blog/2013/02/28/how-to-modify-the-tcp-slash-ip-port-binding-for-the-microsoft-web-deployment-agent-service</id>
    <content type="html"><![CDATA[<p>I love shell scripting, which is probably why I seem to somehow get organically involved in &#8220;DevOps&#8221; on most of my project work.  I&#8217;m drafting up a series of posts on tips and tricks for shell scripts (with love for both Windows and *nix) - it seems to be a fading art among recent comp sci grads.  Until I finish those posts, I wanted to share a quick script I wrote to reassign the TCP/IP port binding for Microsoft&#8217;s Web Deployment Agent service.</p>

<p>This is my attempt to refine a very good answer posted a couple years ago <a href="http://stackoverflow.com/questions/5867392/can-the-web-deploy-agent-run-on-a-port-other-than-80-on-iis6">asking if web deploy can run on a port other than 80</a>.  Why, yes it can&#8230;</p>

<div><script src='https://gist.github.com/5060329.js'></script>
<noscript><pre><code></code></pre></noscript></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tailoring the Windows Command Prompt Shell]]></title>
    <link href="http://steve-jansen.github.com/blog/2013/02/27/tailoring-the-windows-command-prompt-shell/"/>
    <updated>2013-02-27T14:18:00-05:00</updated>
    <id>http://steve-jansen.github.com/blog/2013/02/27/tailoring-the-windows-command-prompt-shell</id>
    <content type="html"><![CDATA[<p>I spend a lot of time in the Windows Command Prompt.  Most developers I work with don&#8217;t know some of the tricks up the Command Prompt&#8217;s sleeve.  So allow me to share some of my favorite settings.</p>

<!-- more -->


<h2>Launching the Command Prompt</h2>

<p>Windows gurus launch the command prompt using the keyboard shortcut <code>Windows Logo Key</code>+<code>R</code> (i.e., &#8220;Run&#8221;) > Type <code>cmd.exe</code> then <code>Enter</code>.  This is way faster than navigating the Windows Start Menu to find the Command Prompt.</p>

<h2>Preferences</h2>

<p>Right click the Command Prompt title bar and select &#8220;Properties&#8221; from the context menu.  I modify the preferences highlighted in below screenshots to accomplish a few things:</p>

<ul>
<li>make the shell easier on our overtaxed eyes ;)</li>
<li>quicker navigation of the command history (up/down arrows) by removing the noise of duplicate entries</li>
<li>simplify copying text to copy any selected text (by the mouse) when you press enter</li>
<li>simplify pasting text to paste on right click</li>
</ul>


<p><img src="http://steve-jansen.github.com/images/posts/2013-02-27-A.png" alt="Screenshot of the Command Prompt Options tab" /></p>

<p><img src="http://steve-jansen.github.com/images/posts/2013-02-27-B.png" alt="Screenshot of the Command Prompt Options tab" /></p>

<p><img src="http://steve-jansen.github.com/images/posts/2013-02-27-C.png" alt="Screenshot of the Command Prompt Options tab" /></p>

<p><img src="http://steve-jansen.github.com/images/posts/2013-02-27-D.png" alt="Screenshot of the Command Prompt Options tab" /></p>

<h2>Tab and Filename Autocompletion</h2>

<p>The <code>Tab</code> key should auto complete the names of files and folders in the current working directory.  Each press of <code>Tab</code> should cycle to the next name.  The autocompletion is pretty smart - it will filter the choices based on what you have already typed.   For example, typing <code>D</code> then <code>Tab</code> will autocomplete the first file or folder that starts with the letter &#8220;D&#8221;.  Tabbing again will display the next file or folder that start with D.  Tabbing will cycle through a ring of possible matches.</p>

<p>For example, tabbing through the letter &#8220;D&#8221; in your user profile directory on Windows 7 might autocomplete &#8220;Desktop&#8221;, &#8220;Documents&#8221;, &#8220;Downloads&#8221;, and then back to &#8220;Desktop&#8221;.  Autocomplete will even quote paths with spaces, which is a nice trick.  I often see experienced developers stuggle to find a filepath, repeatedly doing <code>DIR</code> and <code>CD</code> commands to just run a single batch script.</p>

<p>One small shortcoming is autocomlete cannot expand environmental variables like <code>%ProgramFiles%</code> or <code>%UserProfile%</code>.  Although you can use <code>Windows logo key</code> + <code>R</code> Run dialog to autocomplete environmental variables.</p>

<p>Autocompletion saves you a bunch of typing with just a key or two to filter your choices, tabbing until you find the folder you want,  pressing <code>\</code> to start tabbing through the subfolder, and repeat.  And it makes you look more competent when pair programming.</p>

<h2>Command History</h2>

<p>The <code>DOSKEY</code> utility is similar to the <code>history</code> utility on Unix/Linux shells.  Most developers know you can press the up arrow or down arrow to cycle through the history of issued commands.</p>

<p>Most developers (and even sysadmins) aren&#8217;t aware of the advanced keyboard shortcuts wired to <code>DOSKEY</code>:</p>

<ul>
<li>UP and DOWN ARROWS recall commands</li>
<li><code>ESC</code> clears command line</li>
<li><code>F7</code> displays command history</li>
<li><code>ALT</code>+<code>F7</code> clears command history</li>
<li><code>F8</code> searches command history</li>
<li><code>F9</code> selects a command by number</li>
</ul>


<p>Example of pressing <code>ALT</code>+<code>F7</code> to view the command history:
<img src="http://steve-jansen.github.com/images/posts/2013-02-27-E.png" alt="Screenshot of the visual command history" /></p>

<p>Example of pressing <code>F9</code> to recall a command by history number:
<img src="http://steve-jansen.github.com/images/posts/2013-02-27-F.png" alt="Screenshot of the visual command history" /></p>

<p>Example of pressing <code>F8</code> to cycle through history entries matching the text &#8220;D&#8221; already typed into the comamnd line buffer:
<img src="http://steve-jansen.github.com/images/posts/2013-02-27-G.png" alt="Screenshot of the visual command history" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A ghost no more]]></title>
    <link href="http://steve-jansen.github.com/blog/2013/02/25/a-ghost-no-more/"/>
    <updated>2013-02-25T12:49:00-05:00</updated>
    <id>http://steve-jansen.github.com/blog/2013/02/25/a-ghost-no-more</id>
    <content type="html"><![CDATA[<p>Blogging has long been on my todo list &#8211; quite frankly too long.  A colleague shared <a href="http://www.troyhunt.com/2013/02/the-ghost-who-codes-how-anonymity-is.html">a great piece by Troy Hunt named &#8220;The ghost who codes: how anonymity is killing your career&#8221;</a>.  Troy inspired me that I need to make the time to just get it done.  So this is where I start giving back whatever small knowledge bits I may have.</p>

<p>I am fortunate enough to be with a company now that encourages professional writing, which hasn&#8217;t always been the case.  Troy&#8217;s article really resonated with me that developers have an insatiatable appetite for consuming knowledge.  We take information all the time, and there&#8217;s a duty on all our parts to give back and not just take.  Thanks to both Troy any my colleague Alex for pushing me to do more!</p>

<p>Many years ago I learned an metaphor from a very accomplished veteran of the US military that is quite applicable to coding: &#8220;you have to either be tough or smart to succeed&#8221;.  Say you want to navigate from point A to point B, and there just happens to be a tall mountain between the two points.  The tough guy takes a straight line route, ardously ascending and descending the mountain.  The smart guy circumnavigates the mountain, saving time and energy.</p>

<p>I know developers like to be the smartest person in the room, but, I am self-aware enough to admit I often fall into the &#8220;tough&#8221; camp - hacking into the late hours until the job is done.  I suppose this blog will be a true measure of how many (or how few) smart/clever ideas I have up my sleeve!</p>
]]></content>
  </entry>
  
</feed>
